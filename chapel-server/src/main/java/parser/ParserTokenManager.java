/* ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package parser;
import org.checkerframework.checker.signature.qual.Identifier;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0xfffff007ffc0fb00L) != 0L || (active2 & 0xffff07fff07fL) != 0L)
         {
            jjmatchedKind = 176;
            return 31;
         }
         if ((active2 & 0xf8000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 24;
         }
         if ((active1 & 0x3f0000L) != 0L)
         {
            jjmatchedKind = 176;
            return 61;
         }
         if ((active0 & 0x2000000020000000L) != 0L)
            return 90;
         if ((active1 & 0x400L) != 0L)
            return 31;
         if ((active1 & 0xf800000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 1;
         }
         if ((active0 & 0x180000000000L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 68;
            return 298;
         }
         if ((active2 & 0xf80L) != 0L)
         {
            jjmatchedKind = 176;
            return 12;
         }
         if ((active1 & 0xf0000000000L) != 0L)
         {
            jjmatchedKind = 176;
            return 28;
         }
         return -1;
      case 1:
         if ((active2 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active1 & 0x1f900600304000L) != 0L || (active2 & 0x3L) != 0L)
            return 31;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0xffe06ff9ffcfbb00L) != 0L || (active2 & 0xffffbffffffcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 1;
            }
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x9f6760fdffefbb00L) != 0L || (active2 & 0x81f3bfff7feeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 2;
            }
            return 31;
         }
         if ((active1 & 0x60980f0000000000L) != 0L || (active2 & 0x7e0c40008010L) != 0L)
            return 31;
         return -1;
      case 3:
         if ((active1 & 0x20201800020900L) != 0L || (active2 & 0x908c041402L) != 0L)
            return 31;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x9f574ee5ffedb200L) != 0L || (active2 & 0x9d6333fb6becL) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 3;
            return 31;
         }
         return -1;
      case 4:
         if ((active1 & 0x645000050e93000L) != 0L || (active2 & 0x161300000c0L) != 0L)
            return 31;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x99124ee5af048200L) != 0L || (active2 & 0x9c0203fb6b2cL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 4;
            }
            return 31;
         }
         return -1;
      case 5:
         if ((active1 & 0x1104c0127040200L) != 0L || (active2 & 0x20201032cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 176;
               jjmatchedPos = 5;
            }
            return 31;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x9c0202e488008000L) != 0L || (active2 & 0x9c0021fa6800L) != 0L)
            return 31;
         return -1;
      case 6:
         if ((active1 & 0x110480022040000L) != 0L || (active2 & 0x20200022cL) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 6;
            return 31;
         }
         if ((active1 & 0x40105000200L) != 0L || (active2 & 0x10100L) != 0L)
            return 31;
         return -1;
      case 7:
         if ((active1 & 0x100000022040000L) != 0L || (active2 & 0x24L) != 0L)
            return 31;
         if ((active1 & 0x10480000000000L) != 0L || (active2 & 0x202000208L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 7;
            return 31;
         }
         return -1;
      case 8:
         if ((active1 & 0x480000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 8;
            return 31;
         }
         if ((active1 & 0x10000000000000L) != 0L || (active2 & 0x202000208L) != 0L)
            return 31;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 40);
      case 37:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x400800000000L, 0x0L, 0x10000000000000L);
      case 40:
         return jjStopAtPos(0, 21);
      case 41:
         return jjStopAtPos(0, 22);
      case 42:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x8000004010000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x1L, 0x0L);
      case 44:
         return jjStopAtPos(0, 25);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0xa2L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x40L, 0x0L);
      case 47:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 23);
      case 59:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x140060200000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x8000000000000L);
      case 62:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x280000400000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 26);
      case 91:
         return jjStopAtPos(0, 19);
      case 93:
         return jjStopAtPos(0, 20);
      case 94:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 95:
         return jjStartNfaWithStates_0(0, 74, 31);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc00000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3ff00000000000L, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000000L, 0x7c0000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000200L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fL);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf80L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x1000L, 0x3f000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc0000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf8000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x700000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x800000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf000000000L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000L);
      case 123:
         return jjStopAtPos(0, 17);
      case 124:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x201000000000L, 0x0L, 0x20000000000000L);
      case 125:
         return jjStopAtPos(0, 18);
      case 126:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000000L);
      case 42:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 43:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 45:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 46:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 179);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x80L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x840000000401000L, active2, 0x500800000080L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0x20800000c0010000L, active2, 0x1bf000L);
      case 102:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 108, 31);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x7038200000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4100000000000800L, active2, 0x2f8000400000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800802000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600100000000L, active2, 0x800000000000L);
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1f001000000000L, active2, 0x300000002L);
      case 111:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x96000f043f060300L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800004L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L, active2, 0x40000700L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 31);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000008000L, active2, 0x1000008L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000810L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L, active2, 0x84000000L);
      case 124:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000000000000L);
      case 126:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         break;
      case 46:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         break;
      case 61:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 180);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 181);
         break;
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200100800000L, active2, 0xa41000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000001000000L, active2, 0x2000800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600002000000000L, active2, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x1001000000000000L, active2, 0x4000L);
      case 101:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000080000L, active2, 0x13008000024L);
      case 102:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000042000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000002100L, active2, 0x4100000100L);
      case 108:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000080000000L, active2, 0x80002L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x404000000L, active2, 0x200000000L);
      case 110:
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000038001800L, active2, 0xc0004400040L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000028000L, active2, 0x600L);
      case 112:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 169, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x404000000000L, active2, 0x800080000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe0000040000L, active2, 0x31100080L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 119, 31);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 132, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10008000600200L, active2, 0x8000020000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 125, 31);
         break;
      case 120:
         if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000L);
      case 121:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 158, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe00020400080000L, active2, 0x200000080L);
      case 99:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 31);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 31);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x15104a0c1200000L, active2, 0x80048L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000L, active2, 0x400000L);
      case 104:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000010000L, active2, 0x1100000L);
      case 108:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 31);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0x194000000800L);
      case 109:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0x40000000000L);
      case 110:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 31);
         else if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 31);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4002000000L, active2, 0x800130002000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x104000000L, active2, 0L);
      case 114:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0x2000a00024L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10800000L, active2, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x1004000000000000L, active2, 0x34000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 121:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc0000000000L, active2, 0x40000100104L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L, active2, 0x84000L);
      case 100:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 31);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 168, 31);
         break;
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 31);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 31);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 166, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L, active2, 0x200000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000001000000L, active2, 0L);
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000428008200L, active2, 0x10800L);
      case 107:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 31);
         break;
      case 108:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 31);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1400020004000000L, active2, 0x400000L);
      case 109:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 31);
         break;
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 31);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 31);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0x201000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0x180002000200L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2100000000L, active2, 0L);
      case 114:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000c002000000L, active2, 0x800000022028L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 31);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 31);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000080000000L, active2, 0L);
      case 119:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 120:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0x200000000L);
      case 99:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 31);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 139, 31);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 171, 31);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 172, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 31);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 31);
         break;
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 31);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 31);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 31);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 31);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 31);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 150, 31);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 151, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0x104000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 103:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 31);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000001000000L, active2, 0x20L);
      case 108:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 31);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 148, 31);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0x2000000L);
      case 110:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 31);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 31);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000200L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L, active2, 0x10000L);
      case 115:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 157, 31);
         break;
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 31);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 31);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 127, 31);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 147, 31);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x304L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L, active2, 0x8L);
      case 120:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000000L, active2, 0x2000000L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0x20L);
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 136, 31);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000040000L, active2, 0L);
      case 103:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000000L);
      case 104:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 31);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 120:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 31);
         break;
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x10000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 31);
         break;
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 31);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 31);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 31);
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x200000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000000L, active2, 0x2000000L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 31);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x400000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x200L);
      case 114:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 31);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 161, 31);
         break;
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 116, 31);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 131, 31);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 137, 31);
         break;
      case 110:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 153, 31);
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 103:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 107, 31);
         break;
      case 115:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 110, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 298;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 90:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(96, 97); }
                  else if (curChar == 47)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 12:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 61:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 39)
                     { jjCheckNAddStates(7, 9); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 24:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 298:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddTwoStates(133, 134); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 244;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 227;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 182;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     { jjCheckNAddStates(16, 29); }
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 68)
                        kind = 68;
                     { jjCheckNAddStates(30, 35); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 9)
                        kind = 9;
                     { jjCheckNAddStates(36, 56); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(57, 58); }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 39)
                     { jjCheckNAddStates(59, 61); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(62, 64); }
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar != 48)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjAddStates(65, 67); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(14); }
                  break;
               case 15:
                  if (curChar != 48)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjAddStates(68, 70); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 32:
                  if (curChar == 34)
                     { jjCheckNAddStates(62, 64); }
                  break;
               case 33:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(62, 64); }
                  break;
               case 35:
                  { jjCheckNAddStates(62, 64); }
                  break;
               case 36:
               case 41:
                  if (curChar == 34 && kind > 182)
                     kind = 182;
                  break;
               case 37:
                  if (curChar == 34)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 38:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 40:
                  { jjCheckNAddStates(71, 73); }
                  break;
               case 42:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 45:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 39)
                     { jjCheckNAddStates(59, 61); }
                  break;
               case 47:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(59, 61); }
                  break;
               case 49:
                  { jjCheckNAddStates(59, 61); }
                  break;
               case 50:
               case 55:
                  if (curChar == 39 && kind > 182)
                     kind = 182;
                  break;
               case 51:
                  if (curChar == 39)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 52:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 54:
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 56:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 59:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 62:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 64:
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 65:
               case 70:
                  if (curChar == 34 && kind > 183)
                     kind = 183;
                  break;
               case 66:
                  if (curChar == 34)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 67:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 69:
                  { jjCheckNAddStates(77, 79); }
                  break;
               case 71:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 74:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 39)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 76:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 78:
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 79:
               case 84:
                  if (curChar == 39 && kind > 183)
                     kind = 183;
                  break;
               case 80:
                  if (curChar == 39)
                     { jjCheckNAddStates(80, 82); }
                  break;
               case 81:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(80, 82); }
                  break;
               case 83:
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 85:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 88:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 47)
                     { jjAddStates(57, 58); }
                  break;
               case 91:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 92:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 93:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 94:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 96:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 97:
                  if (curChar == 42)
                     { jjAddStates(83, 84); }
                  break;
               case 98:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 97); }
                  break;
               case 99:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 97); }
                  break;
               case 100:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 101:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddStates(16, 29); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(104, 105); }
                  break;
               case 105:
                  if (curChar == 46)
                     { jjCheckNAdd(106); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 108:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(85, 86); }
                  break;
               case 109:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(110, 103); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(110, 103); }
                  break;
               case 111:
                  if (curChar == 48)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(113, 103); }
                  break;
               case 115:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(115, 103); }
                  break;
               case 117:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(117, 103); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 93); }
                  break;
               case 119:
                  if (curChar == 46)
                     { jjCheckNAdd(120); }
                  break;
               case 121:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 122:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(123, 103); }
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(123, 103); }
                  break;
               case 124:
                  if (curChar == 48)
                     { jjCheckNAddStates(96, 99); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(126, 103); }
                  break;
               case 128:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(128, 103); }
                  break;
               case 130:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(130, 103); }
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(131, 132); }
                  break;
               case 132:
                  if (curChar == 46)
                     { jjCheckNAdd(133); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddTwoStates(133, 134); }
                  break;
               case 135:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(100, 101); }
                  break;
               case 136:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(137); }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(137); }
                  break;
               case 138:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(102, 104); }
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(105, 107); }
                  break;
               case 146:
                  if (curChar == 46)
                     { jjCheckNAdd(147); }
                  break;
               case 148:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(108, 109); }
                  break;
               case 149:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(150); }
                  break;
               case 151:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(110, 112); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(158); }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(159); }
                  break;
               case 160:
                  if (curChar != 48)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAddStates(36, 56); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(113, 114); }
                  break;
               case 163:
                  if (curChar == 46)
                     { jjCheckNAdd(164); }
                  break;
               case 164:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(115, 117); }
                  break;
               case 168:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(118, 119); }
                  break;
               case 169:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(170, 103); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(170, 103); }
                  break;
               case 171:
                  if (curChar == 48)
                     { jjCheckNAddStates(120, 123); }
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(173, 103); }
                  break;
               case 175:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(175, 103); }
                  break;
               case 177:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(177, 103); }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(124, 125); }
                  break;
               case 180:
                  if (curChar == 46)
                     { jjCheckNAdd(181); }
                  break;
               case 181:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 185:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(129, 130); }
                  break;
               case 186:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(187, 103); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(187, 103); }
                  break;
               case 188:
                  if (curChar == 48)
                     { jjCheckNAddStates(131, 134); }
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(190, 103); }
                  break;
               case 192:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(192, 103); }
                  break;
               case 194:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(194, 103); }
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(135, 137); }
                  break;
               case 197:
                  if (curChar == 46)
                     { jjCheckNAdd(198); }
                  break;
               case 199:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(138, 139); }
                  break;
               case 200:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(201, 103); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(201, 103); }
                  break;
               case 202:
                  if (curChar == 48)
                     { jjCheckNAddStates(140, 143); }
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(204, 103); }
                  break;
               case 206:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(206, 103); }
                  break;
               case 208:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(208, 103); }
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(144, 146); }
                  break;
               case 211:
                  if (curChar == 46)
                     { jjCheckNAdd(212); }
                  break;
               case 213:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(147, 148); }
                  break;
               case 214:
                  if ((0x3fe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(215, 103); }
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(215, 103); }
                  break;
               case 216:
                  if (curChar == 48)
                     { jjCheckNAddStates(149, 152); }
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(218, 103); }
                  break;
               case 220:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(220, 103); }
                  break;
               case 222:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(222, 103); }
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(153, 154); }
                  break;
               case 225:
                  if (curChar == 46)
                     { jjCheckNAdd(226); }
                  break;
               case 226:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(155, 156); }
                  break;
               case 230:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(157, 158); }
                  break;
               case 231:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(232); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(232); }
                  break;
               case 233:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(159, 161); }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(162, 163); }
                  break;
               case 242:
                  if (curChar == 46)
                     { jjCheckNAdd(243); }
                  break;
               case 243:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 245:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(164, 165); }
                  break;
               case 247:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(166, 167); }
                  break;
               case 248:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(249); }
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(249); }
                  break;
               case 250:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(168, 170); }
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(171, 173); }
                  break;
               case 259:
                  if (curChar == 46)
                     { jjCheckNAdd(260); }
                  break;
               case 261:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(174, 175); }
                  break;
               case 262:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(263); }
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(263); }
                  break;
               case 264:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(176, 178); }
                  break;
               case 266:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(179, 181); }
                  break;
               case 273:
                  if (curChar == 46)
                     { jjCheckNAdd(274); }
                  break;
               case 275:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(182, 183); }
                  break;
               case 276:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(277); }
                  break;
               case 277:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(277); }
                  break;
               case 278:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(184, 186); }
                  break;
               case 280:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 296:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 13)
                     kind = 13;
                  jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 297:
                  if (curChar != 46)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAddStates(30, 35); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  if (curChar == 117)
                     { jjCheckNAdd(22); }
                  break;
               case 1:
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 61:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 298:
                  if (curChar == 95)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddTwoStates(133, 134); }
                  }
                  if (curChar == 95)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 176)
                        kind = 176;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 98)
                     { jjAddStates(187, 190); }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 3:
                  if (curChar != 95)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(6); }
                  break;
               case 6:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(6); }
                  break;
               case 7:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 8:
                  if (curChar != 95)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if (curChar != 95)
                     break;
                  if (kind > 14)
                     kind = 14;
                  { jjCheckNAdd(10); }
                  break;
               case 11:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar != 95)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(19); }
                  break;
               case 19:
                  if (curChar != 95)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if (curChar != 95)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if (curChar == 101 && kind > 16)
                     kind = 16;
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 115)
                     { jjCheckNAdd(22); }
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 176)
                     kind = 176;
                  { jjCheckNAdd(31); }
                  break;
               case 33:
               case 35:
                  { jjCheckNAddStates(62, 64); }
                  break;
               case 34:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
               case 40:
                  { jjCheckNAddStates(71, 73); }
                  break;
               case 39:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 47:
               case 49:
                  { jjCheckNAddStates(59, 61); }
                  break;
               case 48:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 52:
               case 54:
                  { jjCheckNAddStates(74, 76); }
                  break;
               case 53:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 60:
                  if (curChar == 98)
                     { jjAddStates(187, 190); }
                  break;
               case 62:
               case 64:
                  { jjCheckNAddStates(10, 12); }
                  break;
               case 63:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
               case 69:
                  { jjCheckNAddStates(77, 79); }
                  break;
               case 68:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 76:
               case 78:
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 77:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
               case 83:
                  { jjCheckNAddStates(80, 82); }
                  break;
               case 82:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 91:
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(0, 2); }
                  break;
               case 96:
                  { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 98:
               case 99:
                  { jjCheckNAddTwoStates(99, 97); }
                  break;
               case 102:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 103:
                  if (curChar == 105 && kind > 7)
                     kind = 7;
                  break;
               case 104:
                  if (curChar == 95)
                     { jjAddStates(191, 192); }
                  break;
               case 106:
                  if (curChar == 95)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 107:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(110, 103); }
                  break;
               case 112:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 113:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(113, 103); }
                  break;
               case 114:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 115:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(115, 103); }
                  break;
               case 116:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 117:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(117, 103); }
                  break;
               case 118:
                  if (curChar == 95)
                     { jjAddStates(91, 93); }
                  break;
               case 120:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(123, 103); }
                  break;
               case 125:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(126); }
                  break;
               case 126:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(126, 103); }
                  break;
               case 127:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(128); }
                  break;
               case 128:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(128, 103); }
                  break;
               case 129:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(130); }
                  break;
               case 130:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(130, 103); }
                  break;
               case 131:
                  if (curChar == 95)
                     { jjAddStates(193, 194); }
                  break;
               case 133:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddTwoStates(133, 134); }
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(140); }
                  break;
               case 140:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(140); }
                  break;
               case 141:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(142); }
                  break;
               case 142:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(142); }
                  break;
               case 143:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 144:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(144); }
                  break;
               case 145:
                  if (curChar == 95)
                     { jjAddStates(105, 107); }
                  break;
               case 147:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(153); }
                  break;
               case 153:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(153); }
                  break;
               case 154:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(155); }
                  break;
               case 155:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(155); }
                  break;
               case 156:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(157); }
                  break;
               case 157:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(157); }
                  break;
               case 158:
                  if (curChar != 95)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 159:
                  if (curChar != 95)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(162); }
                  break;
               case 162:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(162, 163); }
                  break;
               case 165:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(166); }
                  break;
               case 166:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(115, 117); }
                  break;
               case 167:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(170, 103); }
                  break;
               case 172:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(173); }
                  break;
               case 173:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(173, 103); }
                  break;
               case 174:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(175); }
                  break;
               case 175:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(175, 103); }
                  break;
               case 176:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(177); }
                  break;
               case 177:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(177, 103); }
                  break;
               case 178:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(179); }
                  break;
               case 179:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(179, 180); }
                  break;
               case 182:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(183); }
                  break;
               case 183:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(126, 128); }
                  break;
               case 184:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(187, 103); }
                  break;
               case 189:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(190); }
                  break;
               case 190:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(190, 103); }
                  break;
               case 191:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(192); }
                  break;
               case 192:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(192, 103); }
                  break;
               case 193:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(194); }
                  break;
               case 194:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(194, 103); }
                  break;
               case 195:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(196); }
                  break;
               case 196:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(135, 137); }
                  break;
               case 198:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(201, 103); }
                  break;
               case 203:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(204); }
                  break;
               case 204:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(204, 103); }
                  break;
               case 205:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(206); }
                  break;
               case 206:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(206, 103); }
                  break;
               case 207:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(208); }
                  break;
               case 208:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(208, 103); }
                  break;
               case 209:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(210); }
                  break;
               case 210:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(144, 146); }
                  break;
               case 212:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(215, 103); }
                  break;
               case 217:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(218); }
                  break;
               case 218:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(218, 103); }
                  break;
               case 219:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(220); }
                  break;
               case 220:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(220, 103); }
                  break;
               case 221:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(222); }
                  break;
               case 222:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(222, 103); }
                  break;
               case 223:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(224); }
                  break;
               case 224:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(224, 225); }
                  break;
               case 227:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(228); }
                  break;
               case 228:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddTwoStates(228, 229); }
                  break;
               case 229:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(235); }
                  break;
               case 235:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(235); }
                  break;
               case 236:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(237); }
                  break;
               case 237:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(237); }
                  break;
               case 238:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(239); }
                  break;
               case 239:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(239); }
                  break;
               case 240:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(241); }
                  break;
               case 241:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(241, 242); }
                  break;
               case 244:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(245); }
                  break;
               case 245:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddTwoStates(245, 246); }
                  break;
               case 246:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(252); }
                  break;
               case 252:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(252); }
                  break;
               case 253:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(254); }
                  break;
               case 254:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(254); }
                  break;
               case 255:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(256); }
                  break;
               case 256:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(256); }
                  break;
               case 257:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(258); }
                  break;
               case 258:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(171, 173); }
                  break;
               case 260:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(266); }
                  break;
               case 266:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(266); }
                  break;
               case 267:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(268); }
                  break;
               case 268:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(268); }
                  break;
               case 269:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(270); }
                  break;
               case 270:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(270); }
                  break;
               case 271:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(272); }
                  break;
               case 272:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddStates(179, 181); }
                  break;
               case 274:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(280); }
                  break;
               case 280:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(280); }
                  break;
               case 281:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(282); }
                  break;
               case 282:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(282); }
                  break;
               case 283:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(284); }
                  break;
               case 284:
                  if (curChar != 95)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAdd(284); }
                  break;
               case 285:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(286); }
                  break;
               case 286:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(286); }
                  break;
               case 287:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(288); }
                  break;
               case 288:
                  if (curChar != 95)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(288); }
                  break;
               case 289:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(290); }
                  break;
               case 290:
                  if (curChar != 95)
                     break;
                  if (kind > 9)
                     kind = 9;
                  { jjCheckNAdd(290); }
                  break;
               case 291:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(292); }
                  break;
               case 292:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAdd(292); }
                  break;
               case 293:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(294); }
                  break;
               case 294:
                  if (curChar != 95)
                     break;
                  if (kind > 12)
                     kind = 12;
                  { jjCheckNAdd(294); }
                  break;
               case 295:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(296); }
                  break;
               case 296:
                  if (curChar != 95)
                     break;
                  if (kind > 13)
                     kind = 13;
                  { jjCheckNAdd(296); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(62, 64); }
                  break;
               case 38:
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(71, 73); }
                  break;
               case 47:
               case 49:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(59, 61); }
                  break;
               case 52:
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(74, 76); }
                  break;
               case 62:
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 67:
               case 69:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 76:
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 81:
               case 83:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(80, 82); }
                  break;
               case 91:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjAddStates(0, 2); }
                  break;
               case 96:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 98:
               case 99:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(99, 97); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 298 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\173", "\175", "\133", "\135", "\50", "\51", "\72", "\73", 
"\54", "\77", "\75", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", 
"\76\76\75", "\46\75", "\174\75", "\136\75", "\52\52\75", "\162\145\144\165\143\145\75", 
"\43", "\74\75\76", "\74\176\76", "\56\56\56", "\56\56", "\174\174", "\46\46", 
"\174", "\136", "\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", 
"\76\76", "\53", "\55", "\52", "\57", "\45", "\52\52", "\53\53", "\55\55", "\176", 
"\41", null, "\55\76", "\56\52", "\55\76\52", "\166\157\151\144", 
"\156\157\164\150\151\156\147", "\137", "\165\151\156\164", "\162\141\156\147\145", "\141\154\151\147\156", 
"\141\163", "\141\164\157\155\151\143", "\142\145\147\151\156", "\142\157\157\154", 
"\142\157\162\162\157\167\145\144", "\142\162\145\141\153", "\142\171", "\142\171\164\145\163", 
"\143\141\164\143\150", "\143\154\141\163\163", "\143\157\142\145\147\151\156", 
"\143\157\146\157\162\141\154\154", "\143\157\155\160\154\145\170", "\143\157\156\146\151\147", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\145\162", 
"\144\145\154\145\164\145", "\144\155\141\160\160\145\144", "\144\157", "\144\157\155\141\151\156", 
"\145\154\163\145", "\145\156\165\155", "\145\170\143\145\160\164", "\145\170\160\157\162\164", 
"\145\170\164\145\162\156", "\146\157\162", "\146\157\162\141\154\154", "\146\157\162\145\141\143\150", 
"\146\157\162\167\141\162\144\151\156\147", "\151\146", "\151\155\141\147", "\151\155\160\154\145\155\145\156\164\163", 
"\151\156", "\151\156\144\145\170", "\151\156\154\151\156\145", "\151\156\157\165\164", 
"\151\156\164", "\151\156\164\145\162\146\141\143\145", "\151\164\145\162", 
"\154\141\142\145\154", "\154\145\164", "\154\151\146\145\164\151\155\145", "\154\157\143\141\154", 
"\154\157\143\141\154\145", "\155\141\156\141\147\145", "\155\157\144\165\154\145", "\156\145\167", 
"\156\151\154", "\156\157\151\156\151\164", "\157\156", "\157\156\154\171", 
"\157\160\145\162\141\164\157\162", "\157\164\150\145\162\167\151\163\145", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\157\167\156\145\144", "\160\141\162\141\155", 
"\160\162\151\166\141\164\145", "\160\162\157\164\157\164\171\160\145", "\160\162\157\143", 
"\160\165\142\154\151\143", "\162\145\141\154", "\162\145\143\157\162\144", "\162\145\144\165\143\145", 
"\162\145\146", "\162\145\161\165\151\162\145", "\162\145\164\165\162\156", 
"\163\143\141\156", "\163\145\154\145\143\164", "\163\145\162\151\141\154", 
"\163\150\141\162\145\144", "\163\151\156\147\154\145", "\163\160\141\162\163\145", 
"\163\164\162\151\156\147", "\163\165\142\144\157\155\141\151\156", "\163\171\156\143", 
"\164\150\145\156", "\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\171", 
"\164\171\160\145", "\165\156\151\157\156", "\165\156\155\141\156\141\147\145\144", 
"\165\163\145", "\166\141\162", "\167\150\145\156", "\167\150\145\162\145", 
"\167\150\151\154\145", "\167\151\164\150", "\171\151\145\154\144", "\172\151\160", 
"\155\151\156\155\141\170", "\155\151\156\154\157\143", "\155\141\170\154\157\143", "\155\151\156", 
"\155\141\170", "\151\155\160\157\162\164", null, null, null, "\75\76", "\46\46\75", 
"\174\174\75", null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   91, 92, 94, 2, 4, 13, 15, 76, 77, 79, 62, 63, 65, 106, 107, 103, 
   102, 103, 104, 105, 118, 119, 120, 131, 132, 145, 146, 147, 158, 159, 106, 164, 
   181, 133, 226, 243, 103, 105, 119, 120, 161, 178, 195, 209, 132, 146, 147, 223, 
   240, 257, 271, 285, 287, 289, 291, 293, 295, 90, 95, 47, 48, 50, 33, 34, 
   36, 5, 7, 9, 16, 18, 20, 38, 39, 43, 52, 53, 57, 67, 68, 72, 
   81, 82, 86, 98, 100, 109, 111, 112, 114, 116, 103, 118, 119, 120, 122, 124, 
   125, 127, 129, 103, 136, 138, 139, 141, 143, 145, 146, 147, 149, 151, 152, 154, 
   156, 162, 163, 166, 167, 103, 169, 171, 172, 174, 176, 103, 179, 180, 183, 184, 
   103, 186, 188, 189, 191, 193, 103, 196, 197, 198, 200, 202, 203, 205, 207, 103, 
   210, 211, 212, 214, 216, 217, 219, 221, 103, 224, 225, 228, 229, 231, 233, 234, 
   236, 238, 241, 242, 245, 246, 248, 250, 251, 253, 255, 258, 259, 260, 262, 264, 
   265, 267, 269, 272, 273, 274, 276, 278, 279, 281, 283, 61, 74, 75, 88, 104, 
   105, 131, 132, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 298; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xffffffffffffffffL, 0xf9ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[298];
    private final int[] jjstateSet = new int[2 * 298];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
