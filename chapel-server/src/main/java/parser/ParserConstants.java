/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NEWLINE = 3;
  /** RegularExpression Id. */
  int IMAGINARY_LITERAL = 7;
  /** RegularExpression Id. */
  int REAL_LITERAL = 8;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 13;
  /** RegularExpression Id. */
  int EXPONENT_PART = 14;
  /** RegularExpression Id. */
  int PEXPONENT_PART = 15;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 16;
  /** RegularExpression Id. */
  int LCURLYBRACE = 17;
  /** RegularExpression Id. */
  int RCURLYBRACE = 18;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 19;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 20;
  /** RegularExpression Id. */
  int LPARENTHESIS = 21;
  /** RegularExpression Id. */
  int RPARENTHESIS = 22;
  /** RegularExpression Id. */
  int COLON = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int QUESTIONMARK = 26;
  /** RegularExpression Id. */
  int ASSIGNEQUAL = 27;
  /** RegularExpression Id. */
  int MULEQUAL = 28;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 29;
  /** RegularExpression Id. */
  int MODEQUAL = 30;
  /** RegularExpression Id. */
  int PLUSEQUAL = 31;
  /** RegularExpression Id. */
  int MINUSEQUAL = 32;
  /** RegularExpression Id. */
  int SHIFTLEFTEQUAL = 33;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQUAL = 34;
  /** RegularExpression Id. */
  int BITWISEANDEQUAL = 35;
  /** RegularExpression Id. */
  int BITWISEOREQUAL = 36;
  /** RegularExpression Id. */
  int BITWISEXOREQUAL = 37;
  /** RegularExpression Id. */
  int POWEQUAL = 38;
  /** RegularExpression Id. */
  int REDUCEEQUAL = 39;
  /** RegularExpression Id. */
  int RANGECOUNT = 40;
  /** RegularExpression Id. */
  int SWAP = 41;
  /** RegularExpression Id. */
  int IO = 42;
  /** RegularExpression Id. */
  int ARGS = 43;
  /** RegularExpression Id. */
  int RANGESPEC = 44;
  /** RegularExpression Id. */
  int OR = 45;
  /** RegularExpression Id. */
  int AND = 46;
  /** RegularExpression Id. */
  int BITWISEOR = 47;
  /** RegularExpression Id. */
  int BITWISEXOR = 48;
  /** RegularExpression Id. */
  int BITWISEAND = 49;
  /** RegularExpression Id. */
  int EQUAL = 50;
  /** RegularExpression Id. */
  int NOTEQUAL = 51;
  /** RegularExpression Id. */
  int LESSTHAN = 52;
  /** RegularExpression Id. */
  int GREATERTHAN = 53;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 54;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 55;
  /** RegularExpression Id. */
  int SHIFTLEFT = 56;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 57;
  /** RegularExpression Id. */
  int PLUS = 58;
  /** RegularExpression Id. */
  int MINUS = 59;
  /** RegularExpression Id. */
  int MUL = 60;
  /** RegularExpression Id. */
  int DIVIDE = 61;
  /** RegularExpression Id. */
  int MOD = 62;
  /** RegularExpression Id. */
  int POW = 63;
  /** RegularExpression Id. */
  int PLUSPLUS = 64;
  /** RegularExpression Id. */
  int MINUSMINUS = 65;
  /** RegularExpression Id. */
  int TILDE = 66;
  /** RegularExpression Id. */
  int NOT = 67;
  /** RegularExpression Id. */
  int DOT = 68;
  /** RegularExpression Id. */
  int POINTERTO = 69;
  /** RegularExpression Id. */
  int DOTSTAR = 70;
  /** RegularExpression Id. */
  int ARROWSTAR = 71;
  /** RegularExpression Id. */
  int VOID = 72;
  /** RegularExpression Id. */
  int NOTHING = 73;
  /** RegularExpression Id. */
  int WILDCARD = 74;
  /** RegularExpression Id. */
  int UINT = 75;
  /** RegularExpression Id. */
  int RANGE = 76;
  /** RegularExpression Id. */
  int ALIGN = 77;
  /** RegularExpression Id. */
  int AS = 78;
  /** RegularExpression Id. */
  int ATOMIC = 79;
  /** RegularExpression Id. */
  int BEGIN = 80;
  /** RegularExpression Id. */
  int BOOL = 81;
  /** RegularExpression Id. */
  int BORROWED = 82;
  /** RegularExpression Id. */
  int BREAK = 83;
  /** RegularExpression Id. */
  int BY = 84;
  /** RegularExpression Id. */
  int BYTES = 85;
  /** RegularExpression Id. */
  int CATCH = 86;
  /** RegularExpression Id. */
  int CLASS = 87;
  /** RegularExpression Id. */
  int COBEGIN = 88;
  /** RegularExpression Id. */
  int COFORALL = 89;
  /** RegularExpression Id. */
  int COMPLEX = 90;
  /** RegularExpression Id. */
  int CONFIG = 91;
  /** RegularExpression Id. */
  int CONST = 92;
  /** RegularExpression Id. */
  int CONTINUE = 93;
  /** RegularExpression Id. */
  int DEFER = 94;
  /** RegularExpression Id. */
  int DELETE = 95;
  /** RegularExpression Id. */
  int DMAPPED = 96;
  /** RegularExpression Id. */
  int DO = 97;
  /** RegularExpression Id. */
  int DOMAIN = 98;
  /** RegularExpression Id. */
  int ELSE = 99;
  /** RegularExpression Id. */
  int ENUM = 100;
  /** RegularExpression Id. */
  int EXCEPT = 101;
  /** RegularExpression Id. */
  int EXPORT = 102;
  /** RegularExpression Id. */
  int EXTERN = 103;
  /** RegularExpression Id. */
  int FOR = 104;
  /** RegularExpression Id. */
  int FORALL = 105;
  /** RegularExpression Id. */
  int FOREACH = 106;
  /** RegularExpression Id. */
  int FORWARDING = 107;
  /** RegularExpression Id. */
  int IF = 108;
  /** RegularExpression Id. */
  int IMAG = 109;
  /** RegularExpression Id. */
  int IMPLEMENTS = 110;
  /** RegularExpression Id. */
  int IN = 111;
  /** RegularExpression Id. */
  int INDEX = 112;
  /** RegularExpression Id. */
  int INLINE = 113;
  /** RegularExpression Id. */
  int INOUT = 114;
  /** RegularExpression Id. */
  int INT = 115;
  /** RegularExpression Id. */
  int INTERFACE = 116;
  /** RegularExpression Id. */
  int ITER = 117;
  /** RegularExpression Id. */
  int LABEL = 118;
  /** RegularExpression Id. */
  int LET = 119;
  /** RegularExpression Id. */
  int LIFETIME = 120;
  /** RegularExpression Id. */
  int LOCAL = 121;
  /** RegularExpression Id. */
  int LOCALE = 122;
  /** RegularExpression Id. */
  int MANAGE = 123;
  /** RegularExpression Id. */
  int MODULE = 124;
  /** RegularExpression Id. */
  int NEW = 125;
  /** RegularExpression Id. */
  int NIL = 126;
  /** RegularExpression Id. */
  int NOINIT = 127;
  /** RegularExpression Id. */
  int ON = 128;
  /** RegularExpression Id. */
  int ONLY = 129;
  /** RegularExpression Id. */
  int OPERATOR = 130;
  /** RegularExpression Id. */
  int OTHERWISE = 131;
  /** RegularExpression Id. */
  int OUT = 132;
  /** RegularExpression Id. */
  int OVERRIDE = 133;
  /** RegularExpression Id. */
  int OWNED = 134;
  /** RegularExpression Id. */
  int PARAM = 135;
  /** RegularExpression Id. */
  int PRIVATE = 136;
  /** RegularExpression Id. */
  int PROTOTYPE = 137;
  /** RegularExpression Id. */
  int PROC = 138;
  /** RegularExpression Id. */
  int PUBLIC = 139;
  /** RegularExpression Id. */
  int REAL = 140;
  /** RegularExpression Id. */
  int RECORD = 141;
  /** RegularExpression Id. */
  int REDUCE = 142;
  /** RegularExpression Id. */
  int REF = 143;
  /** RegularExpression Id. */
  int REQUIRE = 144;
  /** RegularExpression Id. */
  int RETURN = 145;
  /** RegularExpression Id. */
  int SCAN = 146;
  /** RegularExpression Id. */
  int SELECT = 147;
  /** RegularExpression Id. */
  int SERIAL = 148;
  /** RegularExpression Id. */
  int SHARED = 149;
  /** RegularExpression Id. */
  int SINGLE = 150;
  /** RegularExpression Id. */
  int SPARSE = 151;
  /** RegularExpression Id. */
  int STRING = 152;
  /** RegularExpression Id. */
  int SUBDOMAIN = 153;
  /** RegularExpression Id. */
  int SYNC = 154;
  /** RegularExpression Id. */
  int THEN = 155;
  /** RegularExpression Id. */
  int THROW = 156;
  /** RegularExpression Id. */
  int THROWS = 157;
  /** RegularExpression Id. */
  int TRY = 158;
  /** RegularExpression Id. */
  int TYPE = 159;
  /** RegularExpression Id. */
  int UNION = 160;
  /** RegularExpression Id. */
  int UNMANAGED = 161;
  /** RegularExpression Id. */
  int USE = 162;
  /** RegularExpression Id. */
  int VAR = 163;
  /** RegularExpression Id. */
  int WHEN = 164;
  /** RegularExpression Id. */
  int WHERE = 165;
  /** RegularExpression Id. */
  int WHILE = 166;
  /** RegularExpression Id. */
  int WITH = 167;
  /** RegularExpression Id. */
  int YIELD = 168;
  /** RegularExpression Id. */
  int ZIP = 169;
  /** RegularExpression Id. */
  int MINMAX = 170;
  /** RegularExpression Id. */
  int MINLOC = 171;
  /** RegularExpression Id. */
  int MAXLOC = 172;
  /** RegularExpression Id. */
  int MIN = 173;
  /** RegularExpression Id. */
  int MAX = 174;
  /** RegularExpression Id. */
  int IMPORT = 175;
  /** RegularExpression Id. */
  int ID = 176;
  /** RegularExpression Id. */
  int LETTER = 177;
  /** RegularExpression Id. */
  int DIGIT = 178;
  /** RegularExpression Id. */
  int STRING_LITERAL = 182;
  /** RegularExpression Id. */
  int BYTES_LITERAL = 183;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<IMAGINARY_LITERAL>",
    "<REAL_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<EXPONENT_PART>",
    "<PEXPONENT_PART>",
    "<BOOL_LITERAL>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"**=\"",
    "\"reduce=\"",
    "\"#\"",
    "\"<=>\"",
    "\"<~>\"",
    "\"...\"",
    "\"..\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"**\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "<DOT>",
    "\"->\"",
    "\".*\"",
    "\"->*\"",
    "\"void\"",
    "\"nothing\"",
    "\"_\"",
    "\"uint\"",
    "\"range\"",
    "\"align\"",
    "\"as\"",
    "\"atomic\"",
    "\"begin\"",
    "\"bool\"",
    "\"borrowed\"",
    "\"break\"",
    "\"by\"",
    "\"bytes\"",
    "\"catch\"",
    "\"class\"",
    "\"cobegin\"",
    "\"coforall\"",
    "\"complex\"",
    "\"config\"",
    "\"const\"",
    "\"continue\"",
    "\"defer\"",
    "\"delete\"",
    "\"dmapped\"",
    "\"do\"",
    "\"domain\"",
    "\"else\"",
    "\"enum\"",
    "\"except\"",
    "\"export\"",
    "\"extern\"",
    "\"for\"",
    "\"forall\"",
    "\"foreach\"",
    "\"forwarding\"",
    "\"if\"",
    "\"imag\"",
    "\"implements\"",
    "\"in\"",
    "\"index\"",
    "\"inline\"",
    "\"inout\"",
    "\"int\"",
    "\"interface\"",
    "\"iter\"",
    "\"label\"",
    "\"let\"",
    "\"lifetime\"",
    "\"local\"",
    "\"locale\"",
    "\"manage\"",
    "\"module\"",
    "\"new\"",
    "\"nil\"",
    "\"noinit\"",
    "\"on\"",
    "\"only\"",
    "\"operator\"",
    "\"otherwise\"",
    "\"out\"",
    "\"override\"",
    "\"owned\"",
    "\"param\"",
    "\"private\"",
    "\"prototype\"",
    "\"proc\"",
    "\"public\"",
    "\"real\"",
    "\"record\"",
    "\"reduce\"",
    "\"ref\"",
    "\"require\"",
    "\"return\"",
    "\"scan\"",
    "\"select\"",
    "\"serial\"",
    "\"shared\"",
    "\"single\"",
    "\"sparse\"",
    "\"string\"",
    "\"subdomain\"",
    "\"sync\"",
    "\"then\"",
    "\"throw\"",
    "\"throws\"",
    "\"try\"",
    "\"type\"",
    "\"union\"",
    "\"unmanaged\"",
    "\"use\"",
    "\"var\"",
    "\"when\"",
    "\"where\"",
    "\"while\"",
    "\"with\"",
    "\"yield\"",
    "\"zip\"",
    "\"minmax\"",
    "\"minloc\"",
    "\"maxloc\"",
    "\"min\"",
    "\"max\"",
    "\"import\"",
    "<ID>",
    "<LETTER>",
    "<DIGIT>",
    "\"=>\"",
    "\"&&=\"",
    "\"||=\"",
    "<STRING_LITERAL>",
    "<BYTES_LITERAL>",
  };

}
