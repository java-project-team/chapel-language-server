/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options
{
  LOOKAHEAD=3;
                                     
                      
  STATIC = false;
}
PARSER_BEGIN(Parser)
package parser;
import org.checkerframework.checker.signature.qual.Identifier;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/**
 * Simple brace matcher.
 */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String[] args) throws ParseException {
    Parser parser = new Parser(System.in);
    try {
          SimpleNode n = parser.File();
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
  }
  public static SimpleNode parse(String path) {
        Parser parser;
        if (path == null) {
            parser = new Parser(System.in);
        }
        else {
            try {
                parser = new Parser(new FileInputStream(path));
                return parser.File();
            }
            catch (Exception ignored) {
                return null;
            }
        }
        try {
            return parser.File();
        } catch (Exception e) {
            return null;
        }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| <NEWLINE : "\n">
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
/* LITERALS */
TOKEN : {
<IMAGINARY_LITERAL :
       <DECIMAL_LITERAL> "i"
       | <REAL_LITERAL> "i">
|<REAL_LITERAL :
    ((<DECIMAL_LITERAL>)? <DOT> (["0"-"9", "_"])+ (<EXPONENT_PART>)?)
    | (<DECIMAL_LITERAL> (<DOT>)? <EXPONENT_PART>)
    | ((<HEX_LITERAL> )? <DOT> <HEX_LITERAL> (<PEXPONENT_PART>)?)
    | ((<HEX_LITERAL> )? <DOT> <HEX_LITERAL>  (<PEXPONENT_PART>)?)
    |  (<HEX_LITERAL> (<DOT>)? <PEXPONENT_PART>)
    |  (<HEX_LITERAL> (<DOT>)? <PEXPONENT_PART>)
    >
}
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
|
  < DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9", "_"])* >
|
  < HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F", "_"])+ >
|
  < OCTAL_LITERAL: "0" ["O", "o"] (["0"-"7", "_"])+ >
|
  < BINARY_LITERAL : "0" ["B", "b"] ("0"| "1" |"_")+ >
|
  < EXPONENT_PART: ["e", "E"] ["+", "-"] <INTEGER_LITERAL> >
|
  < PEXPONENT_PART: ["p", "P"] ["+", "-"] <INTEGER_LITERAL> >
|
  <BOOL_LITERAL: ("true" | "false") >
}

// OPERATORS
TOKEN :
{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUESTIONMARK: "?" >
| < ASSIGNEQUAL: "=" >
| < MULEQUAL: "*=" >
| < DIVIDEEQUAL: "/=" >
| < MODEQUAL: "%=" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < SHIFTLEFTEQUAL: "<<=" >
| < SHIFTRIGHTEQUAL: ">>=" >
| < BITWISEANDEQUAL: "&=" >
| < BITWISEOREQUAL: "|=" >
| < BITWISEXOREQUAL: "^=" >
| < POWEQUAL: "**=">
| < REDUCEEQUAL : "reduce=" >
| < RANGECOUNT : "#" >
| < SWAP : "<=>">
| < IO : "<~>">
| < ARGS : "..." >
| < RANGESPEC : ".." >
| < OR: "||" >
| < AND: "&&" >
| < BITWISEOR: "|" >
| < BITWISEXOR: "^" >
| < BITWISEAND: "&" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >
| < SHIFTLEFT: "<<" >
| < SHIFTRIGHT: ">>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MUL: "*" >
| < DIVIDE: "/" >
| < MOD: "%" >
| < POW: "**">
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < TILDE: "~" >
| < NOT: "!" >
| < DOT: ["."] >
| < POINTERTO: "->" >
| < DOTSTAR: ".*" >
| < ARROWSTAR: "->*" >
// KEYWORDS
| < VOID: "void" >
| < NOTHING: "nothing" >
| < WILDCARD : "_" >
| < UINT: "uint" >
| < RANGE: "range" >
| < ALIGN : "align" >
| < AS : "as" >
| < ATOMIC : "atomic" >
| < BEGIN : "begin" >
| < BOOL : "bool" >
| < BORROWED : "borrowed" >
| < BREAK : "break" >
| < BY : "by" >
| < BYTES: "bytes" >
| < CATCH : "catch" >
| < CLASS : "class" >
| < COBEGIN : "cobegin" >
| < COFORALL : "coforall" >
| < COMPLEX : "complex" >
| < CONFIG : "config" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < DEFER: "defer" >
| < DELETE : "delete" >
| < DMAPPED : "dmapped" >
| < DO : "do" >
| < DOMAIN : "domain" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXCEPT : "except" >
| < EXPORT : "export" >
| < EXTERN : "extern" >
| < FOR : "for" >
| < FORALL : "forall" >
| < FOREACH: "foreach" >
| < FORWARDING : "forwarding" >
| < IF : "if" >
| < IMAG : "imag" >
| < IMPLEMENTS : "implements" >
| < IN : "in" >
| < INDEX : "index" >
| < INLINE : "inline" >
| < INOUT : "inout" >
| < INT : "int" >
| < INTERFACE : "interface" >
| < ITER : "iter" >
| < LABEL : "label" >
| < LET : "let" >
| < LIFETIME : "lifetime" >
| < LOCAL : "local" >
| < LOCALE : "locale" >
| < MANAGE : "manage" >
| < MODULE : "module" >
| < NEW : "new" >
| < NIL : "nil" >
| <NOINIT : "noinit" >
| < ON : "on" >
| < ONLY : "only" >
| < OPERATOR : "operator" >
| < OTHERWISE : "otherwise" >
| < OUT : "out" >
| < OVERRIDE : "override" >
| < OWNED : "owned" >
| < PARAM : "param" >
| < PRIVATE : "private" >
| < PROTOTYPE : "prototype" >
| < PROC : "proc" >
| < PUBLIC : "public" >
| < REAL : "real" >
| < RECORD : "record" >
| < REDUCE : "reduce" >
| < REF : "ref" >
| < REQUIRE : "require" >
| < RETURN : "return" >
| < SCAN : "scan" >
| < SELECT : "select" >
| < SERIAL : "serial" >
| < SHARED : "shared" >
| < SINGLE : "single" >
| < SPARSE : "sparse" >
| < STRING : "string" >
| < SUBDOMAIN : "subdomain" >
| < SYNC : "sync" >
| < THEN : "then" >
//| < THIS : "this" > // TODO \u0421\u2021\u0421\u201a\u0420\u0455 \u0421\u201a\u0420\u0455 \u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0491\u0421\u0453\u0420\u0458\u0420\u00b0\u0421\u201a\u0421\u040a \u0421\u0403 \u0420\u0405\u0420\u0451\u0420\u0458
| < THROW : "throw" >
| < THROWS: "throws" >
//| < TRUE : "true" >
//| < FALSE : "false" >
| < TRY : "try" >
| < TYPE : "type" >
| < UNION : "union" >
| < UNMANAGED : "unmanaged" >
| < USE : "use" >
| < VAR : "var" >
| < WHEN : "when" >
| < WHERE : "where" >
| < WHILE : "while" >
| < WITH : "with" >
| < YIELD : "yield" >
| < ZIP : "zip" >
| < MINMAX : "minmax">
| < MINLOC : "minloc">
| < MAXLOC : "maxloc">
| < MIN : "min">
| < MAX : "max">
| < IMPORT : "import" >
}
/* IDENTIFIERS */
TOKEN :
{
  < ID: <LETTER> (<LETTER>|<DIGIT>|"$")* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Root production. */
SimpleNode File() :
{/*@bgen(jjtree) File */
  SimpleNode jjtn000 = new SimpleNode(JJTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) File */
        try {
/*@egen*/
//    try {
        Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
//    } catch(Exception e) {
//        error_skipto(SEMICOLON);
//    }
    {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ArrayLiteral() :
{/*@bgen(jjtree) ArrayLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArrayLiteral */
    try {
/*@egen*/
    ("[" ExpressionList() "]" [Expression()])
    |
    LOOKAHEAD(3)("[" AssociativeExpr() ("," AssociativeExpr() )* "]")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AssociativeExpr() :
{/*@bgen(jjtree) AssociativeExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTASSOCIATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssociativeExpr */
    try {
/*@egen*/
    Expression() "=>" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void RangeLiteral() :
{/*@bgen(jjtree) RangeLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGELITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RangeLiteral */
    try {
/*@egen*/
    <RANGESPEC> ["<"] [LOOKAHEAD(2)Expression()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Block()     :
{}
{
    try {
        (Statement())* <EOF>
    } catch (Exception e) {
//      System.out.println(e.toString());  // print the error message
        error_skipto(SEMICOLON);
    }
}

void  ExpressionStatement() :
{/*@bgen(jjtree) ExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
    try {
/*@egen*/
    Expression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Statement() :
{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    try {
    (
    LOOKAHEAD(3)BlockStatement()
    |  LOOKAHEAD(2)UseStatement()
    | LOOKAHEAD(3)IfStatement()
    |  LOOKAHEAD(3)ForStatement()
    |  LOOKAHEAD(3)SelectStatement()
    |  LOOKAHEAD(3)WhileDoStatement()
    |  LOOKAHEAD(3)DoWhileStatement()
    |  LOOKAHEAD(3)LabelStatement()
    |  LOOKAHEAD(3)BreakStatement()
    |  LOOKAHEAD(3)ContinueStatement()
    |  LOOKAHEAD(3)ParamForStatement()
    |  LOOKAHEAD(3)ImportStatement()
    |  LOOKAHEAD(3)DeferStatement()
    |  LOOKAHEAD(3)EmptyStatement()
    |  LOOKAHEAD(3)ReturnStatement()
    |  LOOKAHEAD(3)YieldStatement()
    |  LOOKAHEAD(3)ModuleDeclarationStatement()
    |  LOOKAHEAD(3)ProcedureDeclarationStatement()
    |  LOOKAHEAD(3)ExternalProcedureDeclarationStatement()
    |  LOOKAHEAD(3)ExportedProcedureDeclarationStatement()
    |  LOOKAHEAD(3)IteratorDeclarationStatement()
    |  LOOKAHEAD(3)MethodDeclarationStatement()
    |  LOOKAHEAD(3)TypeDeclarationStatement()
    |  LOOKAHEAD(3)VariableDeclarationStatement()
    |  LOOKAHEAD(3)RemoteVariableDeclarationStatement()
    |  LOOKAHEAD(3)OnStatement()
    |  LOOKAHEAD(3)CobeginStatement()
    |  LOOKAHEAD(3)CoforallStatement()
    |  LOOKAHEAD(3)BeginStatement()
    |  LOOKAHEAD(3)SyncStatement()
    |  LOOKAHEAD(3)SerialStatement()
    |  LOOKAHEAD(3)ForallStatement()
    |  LOOKAHEAD(3)DeleteStatement()
    |  LOOKAHEAD(3)ManageStatement()
    | LOOKAHEAD(3)ExpressionStatement()
    )
   } catch (ParseException e) {
        System.out.println(e.getMessage());
        error_skipto(SEMICOLON);
    //        throw e;
   }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtn000.jjtSetFirstToken(getToken(1));
try {
/*@egen*/
  Token t;
//  System.out.println("error found");
  // consume tokens all the way up to a token of "kind" - use a do-while loop
  // rather than a while because the current token is the one immediately before
  // the erroneous token (in our case the token immediately before what should
  // have been "if"/"while".
  do {
    t = getNextToken();
//    System.out.println(t.toString());
  }
  while (t.kind != kind && t.kind != EOF);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void SelectStatement() :
{/*@bgen(jjtree) SelectStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SelectStatement */
    try {
/*@egen*/
    <SELECT> Expression() "{"
    (
    (<WHEN> Expression() ("," Expression())* [<DO>] Statement())
    | (<OTHERWISE> (Statement() | (<DO> Statement() )))
    )*
    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void CTRLDecl() :
{/*@bgen(jjtree) CTRLDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTCTRLDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CTRLDecl */
     try {
/*@egen*/
     (<VAR> | <CONST>) Identifier() <EQUAL> Expression()/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/

}
void WhileDoStatement() :
{/*@bgen(jjtree) WhileDoStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILEDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhileDoStatement */
    try {
/*@egen*/
    <WHILE>
    (Expression() | CTRLDecl())  [<DO> ]Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void DoWhileStatement() :
{/*@bgen(jjtree) DoWhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDOWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DoWhileStatement */
    try {
/*@egen*/
    <DO> Statement() <WHILE> Expression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ForStatement() :
{/*@bgen(jjtree) ForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
    try {
/*@egen*/
    <FOR> [LOOKAHEAD(3)(Identifier() | ("(" Identifier() ("," Identifier())* ")") ) <IN>] IterableExpr()
    [<DO> ]Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IterableExpr() :
{/*@bgen(jjtree) IterableExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTITERABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IterableExpr */
    try {
/*@egen*/
    Expression() | (<ZIP> "(" ExpressionList() ")")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void LabelStatement() :
{/*@bgen(jjtree) LabelStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LabelStatement */
    try {
/*@egen*/
    <LABEL> Identifier() Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
    try {
/*@egen*/
    <BREAK> [LOOKAHEAD(2)Identifier()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
    try {
/*@egen*/
    <CONTINUE> [LOOKAHEAD(2)Identifier()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void ParamForStatement() :
{/*@bgen(jjtree) ParamForStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParamForStatement */
    try {
/*@egen*/
    <FOR> <PARAM> Identifier() <IN> RangeLiteral() [<BY> <INTEGER_LITERAL>] [<DO> ] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void UseStatement() :
{/*@bgen(jjtree) UseStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTUSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UseStatement */
    try {
/*@egen*/
    [PrivacySpecifier()] <USE> ModuleOrEnumName() ("," ModuleOrEnumName() )* [LimitationClause()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void LimitationClause() :
{/*@bgen(jjtree) LimitationClause */
  SimpleNode jjtn000 = new SimpleNode(JJTLIMITATIONCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LimitationClause */
    try {
/*@egen*/
    (<EXCEPT> Exclude() ("," Exclude())* )
    | (<ONLY> [LOOKAHEAD(3)RenameBase() ("," RenameBase())* ])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Exclude() :
{/*@bgen(jjtree) Exclude */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCLUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Exclude */
    try {
/*@egen*/
    Operator()
    | Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ModuleOrEnumName() :
{/*@bgen(jjtree) ModuleOrEnumName */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEORENUMNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleOrEnumName */
    try {
/*@egen*/
//    LOOKAHEAD(3)(RenameBase())
//    |LOOKAHEAD(3)(Identifier() <DOT> ModuleOrEnumName())
    (Identifier() | Operator()) ( <DOT> (Identifier() | Operator()) )* [<AS> (Identifier() | <WILDCARD>)]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void RenameBase() :
{/*@bgen(jjtree) RenameBase */
  SimpleNode jjtn000 = new SimpleNode(JJTRENAMEBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RenameBase */
    try {
/*@egen*/
    (Identifier() [<AS> (Identifier() | <WILDCARD> ) ])
    | Operator()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ImportStatement() :
{/*@bgen(jjtree) ImportStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ImportStatement */
    try {
/*@egen*/
    [PrivacySpecifier()] <IMPORT> ImportExpr() ("," ImportExpr() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ImportExpr() :
{/*@bgen(jjtree) ImportExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ImportExpr */
    try {
/*@egen*/
//(Identifier()
    [Identifier()] (<DOT> Identifier())* [(
     (<AS> (Identifier() | <WILDCARD> ) )
     | Operator()
     | UnqualifiedList() )]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
//    LOOKAHEAD(3)ModuleOrSymbolRename()
//    | LOOKAHEAD(3)(ModuleOrSymbolBase() UnqualifiedList())
}

void ModuleOrSymbolBase() :
{/*@bgen(jjtree) ModuleOrSymbolBase */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEORSYMBOLBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleOrSymbolBase */
    try {
/*@egen*/
    Identifier()[LOOKAHEAD(3)<DOT> ModuleOrSymbolBase()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ModuleOrSymbolRename() :
{/*@bgen(jjtree) ModuleOrSymbolRename */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEORSYMBOLRENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleOrSymbolRename */
    try {
/*@egen*/
    LOOKAHEAD(3)RenameBase()
    | LOOKAHEAD(3)Identifier() <DOT> ModuleOrSymbolRename()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void UnqualifiedList() :
{/*@bgen(jjtree) UnqualifiedList */
  SimpleNode jjtn000 = new SimpleNode(JJTUNQUALIFIEDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnqualifiedList */
      try {
/*@egen*/
      <DOT> "{" RenameBase() ("," RenameBase() )* "}"/*@bgen(jjtree)*/
      } catch (Throwable jjte000) {
        if (jjtc000) {
          jjtree.clearNodeScope(jjtn000);
          jjtc000 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte000 instanceof RuntimeException) {
          throw (RuntimeException)jjte000;
        }
        if (jjte000 instanceof ParseException) {
          throw (ParseException)jjte000;
        }
        throw (Error)jjte000;
      } finally {
        if (jjtc000) {
          jjtree.closeNodeScope(jjtn000, true);
          jjtn000.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/
}

void DeferStatement() :
{/*@bgen(jjtree) DeferStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DeferStatement */
    try {
/*@egen*/
    <DEFER> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void EmptyStatement() :
{/*@bgen(jjtree) EmptyStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EmptyStatement */
    try {
/*@egen*/
    <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ReturnStatement() :
{/*@bgen(jjtree) ReturnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
    try {
/*@egen*/
    <RETURN> [Expression()] ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void YieldStatement() :
{/*@bgen(jjtree) YieldStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) YieldStatement */
    try {
/*@egen*/
    <YIELD> Expression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ModuleDeclarationStatement() :
{/*@bgen(jjtree) ModuleDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleDeclarationStatement */
    try {
/*@egen*/
    [PrivacySpecifier()] [<PROTOTYPE>] <MODULE> Identifier() Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ProcedureDeclarationStatement() :
{/*@bgen(jjtree) ProcedureDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDUREDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ProcedureDeclarationStatement */
    try {
/*@egen*/
    [PrivacySpecifier()]
    [ProcKind()]
    (<PROC> Identifier() [LOOKAHEAD(3)ArgumentList()] | <OPERATOR> Operator() ArgumentList())
    [LOOKAHEAD(3)ReturnIntent()]
    [ReturnType() ]
    [WhereClause() ] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/

}

void WhereClause() : {/*@bgen(jjtree) WhereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WhereClause */
    try {
/*@egen*/
    <WHERE> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void ReturnType() :
{/*@bgen(jjtree) ReturnType */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnType */
    try {
/*@egen*/
    ":" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExternalProcedureDeclarationStatement() :
{/*@bgen(jjtree) ExternalProcedureDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTERNALPROCEDUREDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExternalProcedureDeclarationStatement */
    try {
/*@egen*/
    <EXTERN> [Expression()] <PROC> Identifier() ArgumentList() [LOOKAHEAD(3)ReturnIntent()] [ReturnType()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExportedProcedureDeclarationStatement() :
{/*@bgen(jjtree) ExportedProcedureDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPORTEDPROCEDUREDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExportedProcedureDeclarationStatement */
    try {
/*@egen*/
    <EXPORT> [Expression()] <PROC> Identifier() ArgumentList() [LOOKAHEAD(3)ReturnIntent()] [ReturnType() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IteratorDeclarationStatement() :
{/*@bgen(jjtree) IteratorDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATORDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IteratorDeclarationStatement */
    try {
/*@egen*/
    [PrivacySpecifier() ] <ITER> Identifier() [ArgumentList()] [YieldIntent() ] [YieldType() ] [WhereClause() ]
     Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void YieldType() :
{/*@bgen(jjtree) YieldType */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) YieldType */
    try {
/*@egen*/
    ":" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void YieldIntent() :
{/*@bgen(jjtree) YieldIntent */
  SimpleNode jjtn000 = new SimpleNode(JJTYIELDINTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) YieldIntent */
    try {
/*@egen*/
    <CONST> (<REF>)?
    | <REF>
    | <PARAM>
    | <TYPE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
void MethodDeclarationStatement() :
{/*@bgen(jjtree) MethodDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MethodDeclarationStatement */
    try {
/*@egen*/
    [ProcKind()] (<PROC> | <ITER>) [ThisIntent()]  [LOOKAHEAD(3)TypeBinding()]
        Identifier() [ArgumentList() ] [ReturnIntent()] [ReturnType()] [WhereClause()]  Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeBinding() : {/*@bgen(jjtree) TypeBinding */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeBinding */
    try {
/*@egen*/
    (Identifier() <DOT>)
    | ("(" Expression() ")" <DOT>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ThisIntent() :
{/*@bgen(jjtree) ThisIntent */
  SimpleNode jjtn000 = new SimpleNode(JJTTHISINTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ThisIntent */
    try {
/*@egen*/
    <PARAM>
    |<TYPE>
    |<REF>
    |<CONST> (<REF>)?/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeDeclarationStatement() :
{/*@bgen(jjtree) TypeDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeDeclarationStatement */
    try {
/*@egen*/
    EnumDeclarationStatement()
    |  ClassDeclarationStatement()
    |  LOOKAHEAD(3)TypeAliasDeclarationStatement()
    |  LOOKAHEAD(3)RecordDeclarationStatement()
    |  LOOKAHEAD(3)UnionDeclarationStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void EnumDeclarationStatement() :
{/*@bgen(jjtree) EnumDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumDeclarationStatement */
  try {
/*@egen*/
  <ENUM> Identifier() EnumBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void EnumBody() : {/*@bgen(jjtree) EnumBody */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumBody */
    try {
/*@egen*/
    "{" EnumConstant() ("," EnumConstant())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



void EnumConstant():
{/*@bgen(jjtree) EnumConstant */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumConstant */
    try {
/*@egen*/
    Identifier() [InitPart()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void InitPart(): {/*@bgen(jjtree) InitPart */
  SimpleNode jjtn000 = new SimpleNode(JJTINITPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InitPart */
    try {
/*@egen*/
    "=" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassDeclarationStatement(): {/*@bgen(jjtree) ClassDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassDeclarationStatement */
    try {
/*@egen*/
    <CLASS> Identifier() [ClassInherit()] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassInherit() :
{/*@bgen(jjtree) ClassInherit */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSINHERIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassInherit */
    try {
/*@egen*/
    ":" BasicClassType()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BasicClassType() :
{/*@bgen(jjtree) BasicClassType */
  SimpleNode jjtn000 = new SimpleNode(JJTBASICCLASSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BasicClassType */
    try {
/*@egen*/
    Identifier() ["(" NamedExpression() ("," NamedExpression())* ")"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/

}

void  NamedExpression() :
{/*@bgen(jjtree) NamedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNAMEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NamedExpression */
    try {
/*@egen*/
    LOOKAHEAD(3)Expression()
    |LOOKAHEAD(3)Identifier() "=" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void RecordDeclarationStatement() :
{/*@bgen(jjtree) RecordDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTRECORDDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RecordDeclarationStatement */
    try {
/*@egen*/
    SimpleRecordDeclarationStatement()
    | ExternalRecordDeclarationStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExternalRecordDeclarationStatement() :
{/*@bgen(jjtree) ExternalRecordDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTERNALRECORDDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExternalRecordDeclarationStatement */
    try {
/*@egen*/
    <EXTERN> [Expression()] SimpleRecordDeclarationStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Identifier() :{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Identifier */
                       try {
/*@egen*/<ID>/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc000) {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtn000.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/}

void SimpleRecordDeclarationStatement() :
{/*@bgen(jjtree) SimpleRecordDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLERECORDDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleRecordDeclarationStatement */
    try {
/*@egen*/
    <RECORD> Identifier() Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void UnionDeclarationStatement() :
{/*@bgen(jjtree) UnionDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTUNIONDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnionDeclarationStatement */
    try {
/*@egen*/
    [<EXTERN> ] <UNION> Identifier() Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeAliasDeclarationStatement() :
{/*@bgen(jjtree) TypeAliasDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEALIASDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeAliasDeclarationStatement */
    try {
/*@egen*/
    [PrivacySpecifier()] [<CONFIG>] <TYPE> TypeAliasDeclaration() ("," TypeAliasDeclaration())* ";"
    | ExternalTypeAliasDeclarationStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ExternalTypeAliasDeclarationStatement() :
{/*@bgen(jjtree) ExternalTypeAliasDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTERNALTYPEALIASDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExternalTypeAliasDeclarationStatement */
    try {
/*@egen*/
    <EXTERN> [Expression()] <TYPE> TypeAliasDeclaration() ("," TypeAliasDeclaration())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypeAliasDeclaration() :
{/*@bgen(jjtree) TypeAliasDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEALIASDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypeAliasDeclaration */
    try {
/*@egen*/
    LOOKAHEAD(3)Identifier() "=" Expression()
    |Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VariableDeclarationStatement() :
{/*@bgen(jjtree) VariableDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarationStatement */
    try {
/*@egen*/
    [PrivacySpecifier()] [ConfigExternOrExport()] VariableKind()
    VariableDeclarationList() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ConfigExternOrExport():
{/*@bgen(jjtree) ConfigExternOrExport */
  SimpleNode jjtn000 = new SimpleNode(JJTCONFIGEXTERNOREXPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConfigExternOrExport */
    try {
/*@egen*/
    <CONFIG>
    |<EXTERN>
    |<EXPORT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VariableKind() :
{/*@bgen(jjtree) VariableKind */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEKIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableKind */
try {
/*@egen*/
<PARAM>
|<CONST> [<REF>]
|<VAR>
|<REF>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void VariableDeclarationList() :
{/*@bgen(jjtree) VariableDeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarationList */
    try {
/*@egen*/
    VariableDeclaration() ("," VariableDeclaration() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}



void VariableDeclaration() :
{/*@bgen(jjtree) VariableDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
    try {
/*@egen*/
    IdentifierList()
    [TypePart()] [InitializationPart()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TypePart() :
{/*@bgen(jjtree) TypePart */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TypePart */
 try {
/*@egen*/
 ":" Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void InitializationPart() :
{/*@bgen(jjtree) InitializationPart */
  SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZATIONPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InitializationPart */
 try {
/*@egen*/
 "=" Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void IdentifierList() :
{/*@bgen(jjtree) IdentifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IdentifierList */
    try {
/*@egen*/
    (Identifier() ("," Identifier())*)
    | "(" IdentifierList() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void TupleGroupedIdentifierList() :
{/*@bgen(jjtree) TupleGroupedIdentifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLEGROUPEDIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleGroupedIdentifierList */
    try {
/*@egen*/
    "(" [Identifier() ("," Identifier())* ] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void RemoteVariableDeclarationStatement() :
{/*@bgen(jjtree) RemoteVariableDeclarationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTREMOTEVARIABLEDECLARATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RemoteVariableDeclarationStatement */
    try {
/*@egen*/
    <ON> Expression() VariableDeclarationStatement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void OnStatement() :
{/*@bgen(jjtree) OnStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) OnStatement */
    try {
/*@egen*/
    <ON> Expression()
    [<DO>] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void CobeginStatement() :
{/*@bgen(jjtree) CobeginStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CobeginStatement */
    try {
/*@egen*/
    <COBEGIN> [TaskIntentClause()] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void  TaskIntentClause() :
{/*@bgen(jjtree) TaskIntentClause */
  SimpleNode jjtn000 = new SimpleNode(JJTTASKINTENTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TaskIntentClause */
    try {
/*@egen*/
    <WITH> "(" TaskIntentList() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  TaskIntentItem() :
{/*@bgen(jjtree) TaskIntentItem */
  SimpleNode jjtn000 = new SimpleNode(JJTTASKINTENTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TaskIntentItem */
try {
/*@egen*/
LOOKAHEAD(3)FormalIntent() Identifier()
|ReduceScanOperator() <REDUCE> Identifier()
|ClassType() <REDUCE> Identifier()
|LOOKAHEAD(3)TaskPrivateVarDecl()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void ClassType() :
{/*@bgen(jjtree) ClassType */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassType */
    try {
/*@egen*/
    BasicClassType()
    |<OWNED> BasicClassType()
    |<SHARED> BasicClassType()
    |<BORROWED> BasicClassType()
    |<UNMANAGED> BasicClassType()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ReduceScanOperator() :
{/*@bgen(jjtree) ReduceScanOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTREDUCESCANOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReduceScanOperator */
try {
/*@egen*/
"+"
|"*"
|"&&"
|"||"
|"&"
|"|"
|"^"
|<MINMAX>
|<MINLOC>
|<MAXLOC>
|<MIN>
|<MAX>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  TaskIntentList() :
{/*@bgen(jjtree) TaskIntentList */
  SimpleNode jjtn000 = new SimpleNode(JJTTASKINTENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TaskIntentList */
    try {
/*@egen*/
    LOOKAHEAD(3)TaskIntentItem() "," TaskIntentList()
    |LOOKAHEAD(3)TaskIntentItem()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  TaskPrivateVarDecl() :
{/*@bgen(jjtree) TaskPrivateVarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTTASKPRIVATEVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TaskPrivateVarDecl */
    try {
/*@egen*/
    TaskPrivateVarKind() Identifier() [TypePart()] [InitializationPart()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  TaskPrivateVarKind() :
{/*@bgen(jjtree) TaskPrivateVarKind */
  SimpleNode jjtn000 = new SimpleNode(JJTTASKPRIVATEVARKIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TaskPrivateVarKind */
try {
/*@egen*/
<CONST>
|<VAR>
|<REF>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void CoforallStatement() :
{/*@bgen(jjtree) CoforallStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOFORALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CoforallStatement */
    try {
/*@egen*/
    <COFORALL> (IndexVarDeclaration() | IteratableExpression() )
    [<IN> IteratableExpression()] [TaskIntentClause()] [<DO>] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  IteratableExpression() :
{/*@bgen(jjtree) IteratableExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IteratableExpression */
    try {
/*@egen*/
    Expression()
    |<ZIP> "(" ExpressionList() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ExpressionList()      :
{}
{
    Expression() ("," Expression())*
//    LOOKAHEAD(3)Expression() "," ExpressionList()
//    |LOOKAHEAD(3)Expression()
}

void  IndexVarDeclaration() :
{/*@bgen(jjtree) IndexVarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEXVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IndexVarDeclaration */
try {
/*@egen*/
Identifier()
|TupleGroupedIdentifierList()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  BeginStatement() :
{/*@bgen(jjtree) BeginStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BeginStatement */
    try {
/*@egen*/
    <BEGIN> [TaskIntentClause()] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  SyncStatement() :
{/*@bgen(jjtree) SyncStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSYNCSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SyncStatement */
 try {
/*@egen*/
 <SYNC> Statement()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  SyncType() :
{/*@bgen(jjtree) SyncType */
  SimpleNode jjtn000 = new SimpleNode(JJTSYNCTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SyncType */
 try {
/*@egen*/
 <SYNC> Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  SerialStatement() :
{/*@bgen(jjtree) SerialStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSERIALSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SerialStatement */
 try {
/*@egen*/
 <SERIAL> [LOOKAHEAD(3)Expression()] [<DO>] Statement()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  AtomicType() :
{/*@bgen(jjtree) AtomicType */
  SimpleNode jjtn000 = new SimpleNode(JJTATOMICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AtomicType */
    try {
/*@egen*/
    <ATOMIC> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  SingleType() :
{/*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = new SimpleNode(JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SingleType */
    try {
/*@egen*/
    <SINGLE> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ForallStatement() :
{/*@bgen(jjtree) ForallStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTFORALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForallStatement */
    try {
/*@egen*/
    (<FORALL> (IndexVarDeclaration() | IteratableExpression()) [<IN> IteratableExpression()] [TaskIntentClause()]
     [<DO>] Statement() )
    | ("[" (IndexVarDeclaration() | IteratableExpression())
        [<IN> IteratableExpression()] [TaskIntentClause()] "]" Statement()
        )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  DeleteStatement() :
{/*@bgen(jjtree) DeleteStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DeleteStatement */
 try {
/*@egen*/
 <DELETE> ExpressionList() ";"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void ManageStatement() :
{/*@bgen(jjtree) ManageStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTMANAGESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ManageStatement */
    try {
/*@egen*/
    <MANAGE> ManagerExpression() ("," ManagerExpression())* [<DO>] Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ManagerExpression() :
{/*@bgen(jjtree) ManagerExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMANAGEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ManagerExpression */
    try {
/*@egen*/
    Expression() [<AS> [VariableKind()] Identifier()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ParenthesizedExpression() :
{/*@bgen(jjtree) ParenthesizedExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPARENTHESIZEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParenthesizedExpression */
    try {
/*@egen*/
    "(" Expression() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void AssignOperators() :
{/*@bgen(jjtree) AssignOperators */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNOPERATORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignOperators */
    try {
/*@egen*/
    "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "**="
    | "&="
    | "|="
    | "^="
    | "&&="
    | "||="
    | "<<="
    | ">>="/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void BlockStatement() :
{/*@bgen(jjtree) BlockStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BlockStatement */
    try {
/*@egen*/
    "{" (Statement())* "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void IfStatement() :
{/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
    try {
/*@egen*/
    <IF> (Expression() | CTRLDecl() )
    [<THEN>] Statement()
    [LOOKAHEAD(3)<ELSE> Statement()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void PrivacySpecifier() : {/*@bgen(jjtree) PrivacySpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIVACYSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrivacySpecifier */
    try {
/*@egen*/
    <PRIVATE> | <PUBLIC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ReturnIntent() :
{/*@bgen(jjtree) ReturnIntent */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNINTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReturnIntent */
    try {
/*@egen*/
    LOOKAHEAD(3)<CONST> <REF>
    | LOOKAHEAD(3)<CONST>
    | <REF>
    | <PARAM>
    | <TYPE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  SynchronizationType() :
{/*@bgen(jjtree) SynchronizationType */
  SimpleNode jjtn000 = new SimpleNode(JJTSYNCHRONIZATIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SynchronizationType */
 try {
/*@egen*/
 SyncType()
|SingleType()
|AtomicType()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DataparallelType() :
{/*@bgen(jjtree) DataparallelType */
  SimpleNode jjtn000 = new SimpleNode(JJTDATAPARALLELTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DataparallelType */
 try {
/*@egen*/
 RangeType()
|LOOKAHEAD(3)DomainType()
|LOOKAHEAD(3)MappedDomainType()
|LOOKAHEAD(3)IndexType()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  MappedDomainType() :
{/*@bgen(jjtree) MappedDomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTMAPPEDDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MappedDomainType */
 try {
/*@egen*/
 DomainType() <DMAPPED> DmapValue()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  IndexType() :
{/*@bgen(jjtree) IndexType */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEXTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IndexType */
 try {
/*@egen*/
 <INDEX> "(" DomainExpression() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  RangeType() :
{/*@bgen(jjtree) RangeType */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RangeType */
 try {
/*@egen*/
 <RANGE> ("(" NamedExpression() ("," NamedExpression())* ")")?/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  TupleType() :
{/*@bgen(jjtree) TupleType */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleType */
try {
/*@egen*/
"(" Expression() ("," Expression())* [","] ")"/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  PrimitiveTypeParameterPart() :
{/*@bgen(jjtree) PrimitiveTypeParameterPart */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMITIVETYPEPARAMETERPART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrimitiveTypeParameterPart */
 try {
/*@egen*/
 "(" IntegerParameterExpression() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  IntegerParameterExpression() :
{/*@bgen(jjtree) IntegerParameterExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERPARAMETEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IntegerParameterExpression */
 try {
/*@egen*/
 Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
 try {
/*@egen*/
 <VOID>
|<NOTHING>
|(<INT>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|(<BOOL>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|(<UINT>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|(<REAL>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|(<IMAG>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|(<COMPLEX>[LOOKAHEAD(3)PrimitiveTypeParameterPart()])
|<STRING>
|<BYTES>
|<ENUM>
|<RECORD>
|<CLASS>
|<OWNED>
|<SHARED>
|<UNMANAGED>
|<BORROWED>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void Operator() :
{/*@bgen(jjtree) Operator */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Operator */
    try {
/*@egen*/
//'align' 'by'
//  + - * / % ** : ! == != <= >= < > << >> & | ^ ~
    <ALIGN>
    | <BY>
    |<PLUS>
    | <MINUS>
    | <MUL>
    | <DIVIDE>
    | <MOD>
    | <POW>
    | <COLON>
    | <NOT>
    | <EQUAL>
    | <NOTEQUAL>
    | <LESSTHANOREQUALTO>
    | <GREATERTHANOREQUALTO>
    | <LESSTHAN>
    | <GREATERTHAN>
    | <SHIFTLEFT>
    | <SHIFTRIGHT>
    | <BITWISEAND>
    | <BITWISEOR>
    | <BITWISEXOR>
    | <TILDE>
//  = += -= *= /= %= **= &= |= ^= <<= >>= <=> <~> #
    | <ASSIGNEQUAL>
    | <PLUSEQUAL>
    | <MINUSEQUAL>
    | <MULEQUAL>
    | <DIVIDEEQUAL>
    | <MODEQUAL>
    | <POWEQUAL>
    | <BITWISEANDEQUAL>
    | <BITWISEOREQUAL>
    | <BITWISEXOREQUAL>
    | <SHIFTLEFTEQUAL>
    | <SHIFTRIGHTEQUAL>
    | <SWAP>
    | <IO>
    | <AND>
    | <RANGECOUNT>
    | <MINUSMINUS>
    | <PLUSPLUS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    "(" [Formal() ("," Formal())*] ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void FormalType() :
{/*@bgen(jjtree) FormalType */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FormalType */
    try {
/*@egen*/
    ":" (Expression() | LOOKAHEAD(3)"?" [LOOKAHEAD(3)Expression()])/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VariableArgumentExpr() :
{/*@bgen(jjtree) VariableArgumentExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLEARGUMENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VariableArgumentExpr */
    try {
/*@egen*/
    <ARGS> (Expression()  | LOOKAHEAD(3)"?" Identifier())?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void Formal() :
{/*@bgen(jjtree) Formal */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Formal */
     try {
/*@egen*/
     [ FormalIntent()]
      (Identifier() | TupleGroupedIdentifierList())
      [FormalType()]
      ("=" Expression()  | VariableArgumentExpr() )?/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void FormalIntent() :
{/*@bgen(jjtree) FormalIntent */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMALINTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FormalIntent */
    try {
/*@egen*/
    <CONST> (<IN> | <REF>)?
    | <IN>
    | <OUT>
    | <INOUT>
    | <REF>
    | <PARAM>
    | <TYPE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ProcKind() :
{/*@bgen(jjtree) ProcKind */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCKIND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ProcKind */
    try {
/*@egen*/
    <INLINE> | <EXPORT> | <EXTERN> | <OVERRIDE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}
// todo \u0420\u045c\u0421\u0453\u0420\u00b6\u0420\u0405\u0420\u0455 \u0421\u0402\u0420\u00b0\u0420\u00b7\u0420\u00b1\u0420\u0451\u0421\u0402\u0420\u00b0\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u0455 \u0420\u0454\u0420\u0455\u0420\u0405\u0421\u201a\u0420\u00b5\u0420\u0454\u0421\u0403\u0421\u201a\u0421\u0453 \u0421\u040c\u0421\u0402\u0421\u0402\u0421\u040c\u0420\u2116 \u0420\u00bb\u0420\u0451\u0421\u201a\u0420\u00b5\u0421\u0402\u0420\u00b0\u0420\u00bb, \u0421\u201a\u0420\u00b0\u0420\u0454 \u0420\u0454\u0420\u00b0\u0420\u0454 \u0420\u0455\u0420\u0405 \u0420\u0406 \u0421\u201a\u0420\u0451\u0420\u0457\u0420\u00b0\u0421\u2026 \u0420\u0451 \u0420\u0406\u0421\u2039\u0421\u0402\u0420\u00b0\u0420\u00b6\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f\u0421\u2026 \u0420\u0405\u0420\u00b5\u0420\u0458\u0420\u0405\u0420\u0455\u0420\u0456\u0420\u0455 \u0421\u0402\u0420\u00b0\u0420\u00b7\u0420\u0405\u0421\u2039\u0420\u2116
void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
     try {
/*@egen*/
     (LOOKAHEAD(3)TupleType()
    | LOOKAHEAD(3)DataparallelType()
    | LOOKAHEAD(3)LiteralExpression()
    | PrimitiveType()
    | SynchronizationType()
    | ParenthesizedExpression()
    |LOOKAHEAD(3)TupleExpression()
    |LetExpression()
    |IfExpression()
    |ForExpression()
    |ForallExpression()
    |Identifier()
    |LOOKAHEAD(3)EnumConstantExpression()
    |LOOKAHEAD(3)NewExpression()
    |LOOKAHEAD(3)QueryExpression()
    |LOOKAHEAD(3)UnaryExpression()
    |LOOKAHEAD(3)ReduceExpression()
    |LOOKAHEAD(3)ScanExpression()
    |LOOKAHEAD(3)ModuleAccessExpression()
    |LOOKAHEAD(3)TupleExpandExpression()
    | DomainExpression()
    |LOOKAHEAD(3)MappedDomainExpression())
    (
     (<COLON> Expression())
    | ("[" (NamedExpression() ("," NamedExpression())*)? "]")
    | (BinaryOperator() Expression())
    | ("(" (NamedExpression() ("," NamedExpression())*)? ")")
    | (
        <DOT>
        (
         Identifier()
         | <LOCALE>
         | <TYPE>
         | LOOKAHEAD(3)<DOMAIN>
         | LOOKAHEAD(3)(Expression() "(" (NamedExpression() ("," NamedExpression())*)? ")")
         | LOOKAHEAD(3)(Expression() "[" (NamedExpression() ("," NamedExpression())*)? "]")
         )
      )
    | (<RANGESPEC> ("<")? [LOOKAHEAD(2)Expression()])
    | ( AssignOperators() Expression() )
    | (<SWAP> Expression() )
    | (<IO> Expression() )
    )*/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void  MappedDomainExpression() :
{/*@bgen(jjtree) MappedDomainExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMAPPEDDOMAINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MappedDomainExpression */
    try {
/*@egen*/
    DomainExpression() <DMAPPED> DmapValue()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  DmapValue() :
{/*@bgen(jjtree) DmapValue */
  SimpleNode jjtn000 = new SimpleNode(JJTDMAPVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DmapValue */
 try {
/*@egen*/
 Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainExpression() :
{/*@bgen(jjtree) DomainExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainExpression */
 try {
/*@egen*/
 (DomainLiteral()
|LOOKAHEAD(3)Identifier()
|LOOKAHEAD(3)DomainAssignmentExpression())
(
  (<ALIGN> Expression())
| (<BY> Expression())
| ("[" SlicingIndexSet() "]")
| ("(" SlicingIndexSet() ")")
)*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainAlignmentExpression() :
{/*@bgen(jjtree) DomainAlignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINALIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainAlignmentExpression */
 try {
/*@egen*/
 <ALIGN> Expression() DomainAlignmentExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainAssignmentExpression() :
{/*@bgen(jjtree) DomainAssignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainAssignmentExpression */
 try {
/*@egen*/
 Identifier() "=" DomainExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainSliceExpression() :
{/*@bgen(jjtree) DomainSliceExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINSLICEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainSliceExpression */
 try {
/*@egen*/
 ("[" SlicingIndexSet() "]" | "(" SlicingIndexSet() ")") DomainSliceExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  SlicingIndexSet() :
{/*@bgen(jjtree) SlicingIndexSet */
  SimpleNode jjtn000 = new SimpleNode(JJTSLICINGINDEXSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SlicingIndexSet */
 try {
/*@egen*/
 LOOKAHEAD(3)DomainExpression()
|LOOKAHEAD(3)RangeExpressionList()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainStridingExpression() :
{/*@bgen(jjtree) DomainStridingExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINSTRIDINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainStridingExpression */
 try {
/*@egen*/
 <BY> Expression() DomainStridingExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  DomainType() :
{/*@bgen(jjtree) DomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainType */
 try {
/*@egen*/
 BaseDomainType()
|SimpleSubdomainType()
|SparseSubdomainType()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  SimpleSubdomainType() :
{/*@bgen(jjtree) SimpleSubdomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLESUBDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SimpleSubdomainType */
 try {
/*@egen*/
 <SUBDOMAIN> "(" DomainExpression() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  SparseSubdomainType() :
{/*@bgen(jjtree) SparseSubdomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTSPARSESUBDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SparseSubdomainType */
 try {
/*@egen*/
 <SPARSE>[<SUBDOMAIN>]"(" DomainExpression() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  BaseDomainType() :
{/*@bgen(jjtree) BaseDomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTBASEDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BaseDomainType */
 try {
/*@egen*/
 LOOKAHEAD(3)RectangularDomainType()
|LOOKAHEAD(3)AssociativeDomainType()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  RectangularDomainType() :
{/*@bgen(jjtree) RectangularDomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTRECTANGULARDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RectangularDomainType */
 try {
/*@egen*/
 <DOMAIN>"(" (NamedExpression() ("," NamedExpression())*) ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  AssociativeDomainType() :
{/*@bgen(jjtree) AssociativeDomainType */
  SimpleNode jjtn000 = new SimpleNode(JJTASSOCIATIVEDOMAINTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssociativeDomainType */
 try {
/*@egen*/
 <DOMAIN> "(" AssociativeIndexType() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  AssociativeIndexType() :
{/*@bgen(jjtree) AssociativeIndexType */
  SimpleNode jjtn000 = new SimpleNode(JJTASSOCIATIVEINDEXTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssociativeIndexType */
 try {
/*@egen*/
 Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  LocaleQueryExpression() :
{/*@bgen(jjtree) LocaleQueryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCALEQUERYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LocaleQueryExpression */
    try {
/*@egen*/
    Expression()<DOT> <LOCALE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  TupleExpandExpression() :
{/*@bgen(jjtree) TupleExpandExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLEEXPANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleExpandExpression */
    try {
/*@egen*/
    "(" <ARGS> Expression() ")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  TupleExpression() :
{/*@bgen(jjtree) TupleExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleExpression */
 try {
/*@egen*/
 "(" TupleComponent() ("," TupleComponent())* [","] ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  TupleComponentList() :
{/*@bgen(jjtree) TupleComponentList */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLECOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleComponentList */
 try {
/*@egen*/
 LOOKAHEAD(3)TupleComponent()
|LOOKAHEAD(3)TupleComponent() "," TupleComponentList()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  TupleComponent() :
{/*@bgen(jjtree) TupleComponent */
  SimpleNode jjtn000 = new SimpleNode(JJTTUPLECOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TupleComponent */
 try {
/*@egen*/
 Expression()
| "_"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  ModuleAccessExpression() :
{/*@bgen(jjtree) ModuleAccessExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEACCESSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleAccessExpression */
    try {
/*@egen*/
    ModuleIdentifierList() <DOT> Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ModuleIdentifierList() :
{/*@bgen(jjtree) ModuleIdentifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULEIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ModuleIdentifierList */
try {
/*@egen*/
LOOKAHEAD(3)Identifier()
|LOOKAHEAD(3)Identifier() <DOT> ModuleIdentifierList()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  ReduceExpression() :
{/*@bgen(jjtree) ReduceExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTREDUCEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ReduceExpression */
    try {
/*@egen*/
    ReduceScanOperator()<REDUCE> IteratableExpression()
    |ClassType()<REDUCE> IteratableExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  ScanExpression() :
{/*@bgen(jjtree) ScanExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSCANEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ScanExpression */
    try {
/*@egen*/
    ReduceScanOperator() <SCAN> IteratableExpression()
    |ClassType() <SCAN> IteratableExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  IfExpression() :
{/*@bgen(jjtree) IfExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTIFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IfExpression */
try {
/*@egen*/
<IF> Expression() <THEN> Expression() [<ELSE> Expression()]/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  ForExpression() :
{/*@bgen(jjtree) ForExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
try {
/*@egen*/
LOOKAHEAD(3)(<FOR> IndexVarDeclaration() <IN> IteratableExpression() <DO> Expression())
|LOOKAHEAD(3)(<FOR> IteratableExpression() <DO> Expression())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  ForallExpression() :
{/*@bgen(jjtree) ForallExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTFORALLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ForallExpression */
 try {
/*@egen*/
 LOOKAHEAD(3)(<FORALL> IndexVarDeclaration() <IN> IteratableExpression() [TaskIntentClause()] <DO> Expression())
|LOOKAHEAD(3)(<FORALL> IteratableExpression() [TaskIntentClause()] <DO> Expression())
|LOOKAHEAD(3)("[" IndexVarDeclaration() <IN> IteratableExpression() [TaskIntentClause()] "]" Expression())
|LOOKAHEAD(3)("[" IteratableExpression() [TaskIntentClause()] "]" Expression())/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  LetExpression() :
{/*@bgen(jjtree) LetExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LetExpression */
    try {
/*@egen*/
    <LET> VariableDeclarationList() <IN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  BinaryExpression() :
{/*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BinaryExpression */
    try {
/*@egen*/
    Expression() BinaryOperator() Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  BinaryOperator() :
{/*@bgen(jjtree) BinaryOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BinaryOperator */
 try {
/*@egen*/
 "+" | "-" | "*" | "/" | "%" | <POW> | "&" | "|" | "^"
 | <SHIFTLEFT> | <SHIFTRIGHT> | <AND> | <OR> | <EQUAL>
 | <NOTEQUAL> | <LESSTHANOREQUALTO> | <GREATERTHANOREQUALTO>
 | <LESSTHAN> | <GREATERTHAN> | <BY> | <RANGECOUNT>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
    try {
/*@egen*/
    UnaryOperator() Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  UnaryOperator() :
{/*@bgen(jjtree) UnaryOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnaryOperator */
 try {
/*@egen*/
 "+" | "-" | "~" | "!"/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  CastExpression() :
{/*@bgen(jjtree) CastExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CastExpression */
   try {
/*@egen*/
   Expression() ":" Expression()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

void QueryExpression() :
{/*@bgen(jjtree) QueryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) QueryExpression */
    try {
/*@egen*/
    "?" [Identifier()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  NewExpression() :
{/*@bgen(jjtree) NewExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NewExpression */
  try {
/*@egen*/
  <NEW> Expression()["(" ArgumentList() ")"]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void  EnumConstantExpression() :
{/*@bgen(jjtree) EnumConstantExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EnumConstantExpression */
    try {
/*@egen*/
    Identifier() <DOT> Identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  LiteralExpression() :
{/*@bgen(jjtree) LiteralExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLITERALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LiteralExpression */
 try {
/*@egen*/
 BoolLiteral()
|LOOKAHEAD(3)RealLiteral()
|LOOKAHEAD(3)ImaginaryLiteral()
|LOOKAHEAD(3)IntegerLiteral()
|LOOKAHEAD(3)RangeLiteral()
|LOOKAHEAD(3)DomainLiteral()
|ArrayLiteral()
|StringLiteral()
|BytesLiteral()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}
void RealLiteral() : {/*@bgen(jjtree) RealLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTREALLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) RealLiteral */
                         try {
/*@egen*/<REAL_LITERAL>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/ }
void ImaginaryLiteral() : {/*@bgen(jjtree) ImaginaryLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTIMAGINARYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) ImaginaryLiteral */
                              try {
/*@egen*/<IMAGINARY_LITERAL>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtn000.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/ }
void StringLiteral() : {/*@bgen(jjtree) StringLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) StringLiteral */
try {
/*@egen*/
<STRING_LITERAL>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/
}

void  BoolLiteral() :
{/*@bgen(jjtree) BoolLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BoolLiteral */
  try {
/*@egen*/
  <BOOL_LITERAL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void  IntegerLiteral() :
{/*@bgen(jjtree) IntegerLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IntegerLiteral */
    try {
/*@egen*/
    <INTEGER_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void  RectangularDomainLiteral() :
{/*@bgen(jjtree) RectangularDomainLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTRECTANGULARDOMAINLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RectangularDomainLiteral */
 try {
/*@egen*/
 "{"
// RangeExpressionList()
  RangeExpression() ("," RangeExpression())*
 "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  RangeExpressionList() :
{/*@bgen(jjtree) RangeExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGEEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RangeExpressionList */
    try {
/*@egen*/
    LOOKAHEAD(3)RangeExpression()
    |LOOKAHEAD(3)RangeExpression() "," RangeExpressionList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  RangeExpression() :
{/*@bgen(jjtree) RangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RangeExpression */
    try {
/*@egen*/
    CountedRangeExpression()
    |AlignedRangeExpression()
    |SlicedRangeExpression()
    |Expression()
    |StridedRangeExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  CountedRangeExpression() :
{/*@bgen(jjtree) CountedRangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCOUNTEDRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CountedRangeExpression */
    try {
/*@egen*/
    "#" Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  StridedRangeExpression() :
{/*@bgen(jjtree) StridedRangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRIDEDRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StridedRangeExpression */
    try {
/*@egen*/
    <BY> StepExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  SlicedRangeExpression() :
{/*@bgen(jjtree) SlicedRangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSLICEDRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SlicedRangeExpression */
    try {
/*@egen*/
    ("(" RangeExpression() ")")
    | ("[" RangeExpression() "]")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void AlignedRangeExpression() :
{/*@bgen(jjtree) AlignedRangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTALIGNEDRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AlignedRangeExpression */
    try {
/*@egen*/
    <ALIGN> Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}


void  StepExpression() :
{/*@bgen(jjtree) StepExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSTEPEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) StepExpression */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void  DomainLiteral() :
{/*@bgen(jjtree) DomainLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTDOMAINLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DomainLiteral */
    try {
/*@egen*/
    LOOKAHEAD(3)RectangularDomainLiteral()
    |LOOKAHEAD(3)AssociativeDomainLiteral()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  AssociativeDomainLiteral() :
{/*@bgen(jjtree) AssociativeDomainLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTASSOCIATIVEDOMAINLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssociativeDomainLiteral */
 try {
/*@egen*/
 "{" AssociativeExpressionList() "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

void  AssociativeExpressionList() :
{/*@bgen(jjtree) AssociativeExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTASSOCIATIVEEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssociativeExpressionList */
    try {
/*@egen*/
    LOOKAHEAD(3)NonRangeExpression()
    |LOOKAHEAD(3)NonRangeExpression() "," AssociativeExpressionList()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void  NonRangeExpression() :
{/*@bgen(jjtree) NonRangeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNONRANGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) NonRangeExpression */
 try {
/*@egen*/
 Expression()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}


TOKEN : {
< STRING_LITERAL : ("\"" (~["\""]|("\\"~[]))* "\"")
    | ("\"\"\"" (~["\""]|("\\"~[]))* "\"\"\"")
    | ("'" (~["'"]|("\\"~[]))* "'")
    | ("'''" (~["'"]|("\\"~[]))* "'''")>
|< BYTES_LITERAL : ("b\"" (~["\""]|("\\"~[]))* "\"")
    | ("b\"\"\"" (~["\""]|("\\"~[]))* "\"\"\"")
    | ("b'" (~["'"]|("\\"~[]))* "'")
    | ("b'''" (~["'"]|("\\"~[]))* "'''")>
}

void  BytesLiteral() :
{/*@bgen(jjtree) BytesLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTBYTESLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BytesLiteral */
    try {
/*@egen*/
    <BYTES_LITERAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}