
PARSER_BEGIN(Parser)

/**
 * Simple brace matcher.
 */
public class Parser {

  /** Main entry point. */
  public static void main(String[] args) throws ParseException {
    Parser parser = new Parser(System.in);
    try {
          SimpleNode n = parser.File();
          n.dump("");
          System.out.println("Thank you.");
        } catch (Exception e) {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          e.printStackTrace();
        }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
/* LITERALS */
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9", "_"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F", "_"])+ >
|
  < #OCTAL_LITERAL: "0" ["O", "o"] (["0"-"7", "_"])+ >
|
  < #BINARY_LITERAL : "0" ["B", "b"] ("0"| "1" |"_")+ >
}
// OPERATORS
TOKEN :
{
  < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < LSQUAREBRACKET: "[" >
| < RSQUAREBRACKET: "]" >
| < LPARENTHESIS: "(" >
| < RPARENTHESIS: ")" >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < QUESTIONMARK: "?" >
| < ASSIGNEQUAL: "=" >
| < MULEQUAL: "*=" >
| < DIVIDEEQUAL: "/=" >
| < MODEQUAL: "%=" >
| < PLUSEQUAL: "+=" >
| < MINUSEQUAL: "-=" >
| < SHIFTLEFTEQUAL: "<<=" >
| < SHIFTRIGHTEQUAL: ">>=" >
| < BITWISEANDEQUAL: "&=" >
| < BITWISEOREQUAL: "|=" >
| < POWEQUAL: "**=">
| < REDUCEEQUAL : "reduce=" >
| < RANGECOUNT : "#" >
| < SWAP : "<=>">
| < IO : "<~>">
| < ARGS : "..." >
| < RANGESPEC : ".." >
| < OR: "||" >
| < AND: "&&" >
| < BITWISEOR: "|" >
| < BITWISEXOR: "^" >
| < BITWISEAND: "&" >
| < EQUAL: "==" >
| < NOTEQUAL: "!=" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALTO: "<=" >
| < GREATERTHANOREQUALTO: ">=" >
| < SHIFTLEFT: "<<" >
| < SHIFTRIGHT: ">>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MUL: "*" >
| < DIVIDE: "/" >
| < MOD: "%" >
| < POW: "**">
| < PLUSPLUS: "++" >
| < MINUSMINUS: "--" >
| < TILDE: "~" >
| < NOT: "!" >
| < DOT: "." >
| < POINTERTO: "->" >
| < DOTSTAR: ".*" >
| < ARROWSTAR: "->*" >
// KEYWORDS
| < WILDCARD : "_" >
| < ALIGN : "align" >
| < AS : "as" >
| < ATOMIC : "atomic" >
| < BEGIN : "begin" >
| < BOOL : "bool" >
| < BORROWED : "borrowed" >
| < BREAK : "break" >
| < BY : "by" >
| < BYTES: "bytes" >
| < CATCH : "catch" >
| < CLASS : "class" >
| < COBEGIN : "cobegin" >
| < COFORALL : "coforall" >
| < COMPLEX : "complex" >
| < CONFIG : "config" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < DEFER: "defer" >
| < DELETE : "delete" >
| < DMAPPED : "dmapped" >
| < DO : "do" >
| < DOMAIN : "domain" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXCEPT : "except" >
| < EXPORT : "export" >
| < EXTERN : "extern" >
| < FAlSETOK : "false" >
| < FOR : "for" >
| < FORALL : "forall" >
| < FOREACH: "foreach" >
| < FORWARDING : "forwarding" >
| < IF : "if" >
| < IMAG : "imag" >
| < IMPLEMENTS : "implements" >
| < IN : "in" >
| < INDEX : "index" >
| < INLINE : "inline" >
| < INOUT : "inout" >
| < INT : "int" >
| < INTERFACE : "interface" >
| < ITER : "iter" >
| < LABEL : "label" >
| < LET : "let" >
| < LIFETIME : "lifetime" >
| < LOCAL : "local" >
| < LOCALE : "locale" >
| < MANAGE : "manage" >
| < MODULE : "module" >
| < NEW : "new" >
| < NIL : "nil" >
| <NOINIT : "noinit" >
| < ON : "on" >
| < ONLY : "only" >
| < OPERATOR : "operator" >
| < OTHERWISE : "otherwise" >
| < OUT : "out" >
| < OVERRIDE : "override" >
| < OWNED : "owned" >
| < PARAM : "param" >
| < PRIVATE : "private" >
| < PROTOTYPE : "prototype" >
| < PROC : "proc" >
| < PUBLIC : "public" >
| < REAL : "real" >
| < RECORD : "record" >
| < REDUCE : "reduce" >
| < REF : "ref" >
| < REQUIRE : "require" >
| < RETURN : "return" >
| < SCAN : "scan" >
| < SELECT : "select" >
| < SERIAL : "serial" >
| < SHARED : "shared" >
| < SINGLE : "single" >
| < SPARSE : "sparse" >
| < STRING : "string" >
| < SUBDOMAIN : "subdomain" >
| < SYNC : "sync" >
| < THEN : "then" >
| < THIS : "this" >
| < THROW : "throw" >
| < THROWS: "throws" >
| < TRUE : "true" >
| < TRY : "try" >
| < TYPE : "type" >
| < UNIT : "uint" >
| < UNION : "union" >
| < UNMANAGED : "unmanaged" >
| < USE : "use" >
| < VAR : "var" >
| < WHEN : "when" >
| < WHERE : "where" >
| < WHILE : "while" >
| < WITH : "with" >
| < YIELD : "yield" >
| < ZIP : "zip" >
| < IMPORT : "import" >
}
/* IDENTIFIERS */
TOKEN :
{
  < ID: <LETTER> (<LETTER>|<DIGIT>|"$")* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

/** Root production. */
SimpleNode File() :
{}
{
    Block() <EOF>
    {return jjtThis;}
}

void ArrayLiteral() :
{}
{
    ("[" Expression() ("," Expression())* [","] "]")
    |
    ("[" AssociativeExpr() ("," AssociativeExpr() )* [","] "]")
}

void AssociativeExpr() :
{}
{
    Expression() "=>" Expression()
}

void RangeLiteral() :
{}
{
    [Expression() ] <RANGESPEC> ["<"] [Expression()]
}

void Block() :
{}
{
    (
//    Declaration() | Expr() | Import() |
    Statement())*
}

void Statement() :
{}
{
    BlockStatement()
    | IfStatement()
    | Expression() ";"
    | AssignStatement()
    |  SwapStatement()
    |  IoStatement()
    |  SelectStatement()
    |  WhileDoStatement()
    |  DoWhileStatement()
    |  ForStatement()
    |  LabelStatement()
    |  BreakStatement()
    |  ContinueStatement()
    |  ParamForStatement()
    |  UseStatement()
    |  ImportStatement()
    |  DeferStatement()
    |  EmptyStatement()
    |  ReturnStatement()
    |  YieldStatement()
    |  ModuleDeclarationStatement()
    |  ProcedureDeclarationStatement()
    |  ExternalProcedureDeclarationStatement()
    |  ExportedProcedureDeclarationStatement()
    |  IteratorDeclarationStatement()
    |  MethodDeclarationStatement()
    |  TypeDeclarationStatement()
    |  VariableDeclarationStatement()
    |  RemoteVariableDeclarationStatement()
    |  OnStatement()
    |  CobeginStatement()
    |  CoforallStatement()
    |  BeginStatement()
    |  SyncStatement()
    |  SerialStatement()
    |  ForallStatement()
    |  DeleteStatement()
    |  ManageStatement()
    // IF WHILE FOR FORALL RETURN mb smthing else
}

void SwapStatement() :
{}
{
    LValueExpr() <SWAP> LValueExpr()
}

void IoStatement() :
{}
{
    IOExpr() <IO> Expression() ";"
}

void IOExpr() :
{}
{
    Expression() | IOExpr()  <IO> Expression()
}

void SelectStatement() :
{}
{
    <SELECT> Expression() "{"
    (
    <WHEN> (Expression())+ (<DO> Statement() | BlockStatement())
    | <OTHERWISE> (Statement() | <DO> Statement())
    )
    "}"
}
void CTRLDecl() :
{}
{
     (<VAR> | <CONST>) <ID> <EQUAL> Expression()

}
void WhileDoStatement() :
{}
{
    <WHILE>
    (Expression() | CTRLDecl())  (<DO> Statement() | BlockStatement())
}

void DoWhileStatement() :
{}
{
    <DO> Statement() <WHILE> Expression() ";"
}

void ForStatement() :
{}
{
    <FOR> [(<ID> | "(" <ID> ("," <ID>)* ")" ) <IN>] IterableExpr() (<DO> Statement() | BlockStatement())
}

void IterableExpr() :
{}
{
    Expression() | <ZIP> "(" Expression() ("," Expression())* ")"
}

void LabelStatement() :
{}
{
    <LABEL> <ID> Statement()
}
void BreakStatement() :
{}
{
    <BREAK> [<ID>]
}
void ContinueStatement() :
{}
{
    <CONTINUE> [<ID>]
}
void ParamForStatement() :
{}
{
    <FOR> <PARAM> <ID> <IN> RangeLiteral() [<BY> <INTEGER_LITERAL>] (<DO> Statement() | BlockStatement() )
}
void UseStatement() :
{}
{
    PrivacySpec() <USE> ModuleOrEnumName() ("," ModuleOrEnumName() )* [LimitationClause()]
}

void LimitationClause() :
{}
{
    (<EXCEPT> Exclude() ("," Exclude())* )
    | (<ONLY> [RenameBase() ("," RenameBase())* ])
}

void Exclude() :
{}
{
    Operator()
    | <ID>
}

void ModuleOrEnumName() :
{}
{
    RenameBase()
    | <ID> "." ModuleOrEnumName()
}

void RenameBase() :
{}
{
    (<ID> [<AS> (<ID> | <WILDCARD> ) ])
    | Operator()
}

void ImportStatement() :
{}
{
    [PrivacySpec()] <IMPORT> ImportExpr() ("," ImportExpr() )*
}

void ImportExpr() :
{}
{
    ModuleOrSymbolRename()
    | ModuleOrSymbolBase() UnqualifiedList()
}

void ModuleOrSymbolBase() :
{}
{
    <ID> ["." ModuleOrSymbolBase()]
}

void ModuleOrSymbolRename() :
{}
{
    RenameBase()
    | <ID> "." ModuleOrSymbolRename()
}

void UnqualifiedList() :
{}
{
      "." "{" RenameBase() ("," RenameBase() )* "}"
}

void DeferStatement() :
{}
{
    <DEFER> Statement()
}
void EmptyStatement() :
{}
{
    <SEMICOLON>
}

void ReturnStatement() :
{}
{
    <RETURN> [Expression()] ";"
}

void YieldStatement() :
{}
{
    <YIELD> Expression() ";"
}

void ModuleDeclarationStatement() :
{}
{
    PrivacySpec() <PROTOTYPE> <MODULE> <ID> BlockStatement()
}

void ProcedureDeclarationStatement() :
{}
{
    [PrivacySpec()]
    [ProcKind()]
    (<PROC> <ID> [ArgumentList()] | <OPERATOR> ArgumentList())
    [ReturnIntent()]
    [ReturnType() ]
    [WhereClause() ]

}

void FunctionBody():
{}
{
    BlockStatement() | ReturnStatement()
}

void WhereClause() : {}
{
    <WHERE> Expression()
}
void ReturnType() :
{}
{
    ":" TypeExpression()
}

void ExternalProcedureDeclarationStatement() :
{}
{
    <EXTERN> [Expression()] <PROC> <ID> ArgumentList() [ReturnIntent()] [ReturnType()]
}

void ExportedProcedureDeclarationStatement() :
{}
{
    <EXPORT> [Expression()] <PROC> <ID> ArgumentList() [ReturnIntent()] [ReturnType() ]
}

void IteratorDeclarationStatement() :
{}
{
    [PrivacySpec() ] <ITER> <ID> [ArgumentList()] [YieldIntent() ] [YieldType() ] [WhereClause() ]
    (YieldStatement() | BlockStatement())
}

void YieldType() :
{}
{
    ":" TypeExpression()
}

void YieldIntent() :
{}
{
    <CONST> (<REF>)?
    | <REF>
    | <PARAM>
    | <TYPE>
}
void MethodDeclarationStatement() :
{}
{
    [ProcKind()] (<PROC> | <ITER>) [ThisIntent()]  [TypeBinding()]
        <ID> [ArgumentList() ] [ReturnIntent()] [ReturnType()] [WhereClause()]  FunctionBody()
}

void TypeBinding() : {}
{
    <ID> "."
    | "(" Expression() ")" "."
}

void ThisIntent() :
{}
{
    <PARAM>
    |<TYPE>
    |<REF>
    |<CONST> (<REF>)?
}

void TypeDeclarationStatement() :
{}
{
    EnumDeclarationStatement()
    |  ClassDeclarationStatement()
    |  RecordDeclarationStatement()
    |  UnionDeclarationStatement()
    |  TypeAliasDeclarationStatement()
}

void EnumDeclarationStatement() :
{}
{
  <ENUM> <ID> "{" EnumConstantList() "}"
}

void EnumConstantList() :
{}
{
  EnumConstant()
|  EnumConstant() "," [EnumConstantList()]
}

void EnumConstant():
{}
{
    <ID> [InitPart()]
}

void InitPart(): {}
{
    "=" Expression()
}

void ClassDeclarationStatement(): {}
{
    <CLASS> <ID> [ClassInherit()] "{"[ ClassStatementList()]"}"
}

void ClassInherit() :
{}
{
    ":" BasicClassType()
}

void BasicClassType() :
{}
{
    <ID> "(" NamedExpressionList() ")"
    |<ID>
}

void  NamedExpressionList() :
{}
{
    NamedExpression() "," NamedExpressionList()
    |NamedExpression()
}

void  NamedExpression() :
{}
{
    Expression()
    |<ID> "=" Expression()
}

void ClassStatementList() :
{}
{
    ClassStatement() ClassStatementList()
    |ClassStatement()
}

void ClassStatement() :
{}
{
    VariableDeclarationStatement()
    |MethodDeclarationStatement()
    |TypeDeclarationStatement()
    |EmptyStatement()
}

void RecordDeclarationStatement() :
{}
{
    SimpleRecordDeclarationStatement()
    | ExternalRecordDeclarationStatement()
}

void ExternalRecordDeclarationStatement() :
{}
{
    <EXTERN> [Expression()] SimpleRecordDeclarationStatement()
}

void Identifier() :{} {<ID>}

void SimpleRecordDeclarationStatement() :
{}
{
    <RECORD> Identifier() "{" RecordStatementList() "}"
}

void RecordStatementList() :
{}
{
    RecordStatement()
    |RecordStatement() RecordStatementList()
}

void RecordStatement() :
{}
{
    VariableDeclarationStatement()
    |MethodDeclarationStatement()
    |TypeDeclarationStatement()
    |EmptyStatement()
}

void UnionDeclarationStatement() :
{}
{
    [<EXTERN> ] <UNION> Identifier() "{" UnionStatementList()"}"
}

void UnionStatementList() :
{}
{
    UnionStatement() UnionStatementList()
    |UnionStatement()
}

void UnionStatement() :
{}
{
    TypeDeclarationStatement()
    |ProcedureDeclarationStatement()
    |IteratorDeclarationStatement()
    |VariableDeclarationStatement()
    |EmptyStatement()
}

void TypeAliasDeclarationStatement() :
{}
{
    [PrivacySpec()] [<CONFIG>] <TYPE> TypeAliasDeclarationList() ";"
    | ExternalTypeAliasDeclarationStatement()
}

void  ExternalTypeAliasDeclarationStatement() :
{}
{
    <EXTERN> [Expression()] <TYPE> TypeAliasDeclarationList()
}

void TypeAliasDeclarationList() :
{}
{
    TypeAliasDeclaration() "," TypeAliasDeclarationList()
    |TypeAliasDeclaration()
}

void TypeAliasDeclaration() :
{}
{
    Identifier()
    |Identifier() "=" TypeExpression()
}


void VariableDeclarationStatement() :
{}
{

}
void RemoteVariableDeclarationStatement() :
{}
{

}
void OnStatement() :
{}
{

}
void CobeginStatement() :
{}
{

}
void CoforallStatement() :
{}
{

}
void BeginStatement() :
{}
{

}
void SyncStatement() :
{}
{

}
void SerialStatement() :
{}
{

}
void ForallStatement() :
{}
{

}
void DeleteStatement() :
{}
{

}
void ManageStatement() :
{}
{
    <MANAGE> ManagerExpr() ManagerExpr() ("," ManagerExpr())* <DO> Statement() | BlockStatement())
}

void ManagerExpr() :
{}
{
    Expression() [<AS> <ID> [VariableKind()] <ID> ]
}

void VariableKind() :
{}
{
    <PARAM>
    | <CONST>
    | <VAR>
    | <REF>
    | <CONST> <REF>
}

void AssignStatement() :
{}
{
    LValueExpr() AssignOperators() Expression() ";"
}

void LValueExpr() :
{}{}

void AssignOperators() :
{}
{
    "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "**="
    | "&="
    | "|="
    | "^="
    | "&&="
    | "||="
    | "<<="
    | ">>="
}

void BlockStatement() :
{}
{
    "{" (Statement())* "}"
}

void IfStatement() :
{}
{
    <IF> (Expression() | CTRLDecl() )
    (<THEN> Statement() | BlockStatement())
    [<ELSE> Statement()]
}

void Import() : {} {}

void Declaration() :
{}
{
    ModuleDeclaration()
    | ProcDeclaration()
    | ClassDeclaration()
}

void PrivacySpec() : {}
{
    <PRIVATE> | <PUBLIC>
}

void ModuleDeclaration() :
{}
{
    [PrivacySpec()] [<PROTOTYPE>] <MODULE> <ID> "{" Block() "}"
}

void Type() :
{}
{
    <INT>
    | <STRING>
    | <COMPLEX>
    | <REAL>
}

void ReturnIntent() :
{}
{
    <CONST> <REF>
    | <CONST>
    | <REF>
    | <PARAM>
    | <TYPE>
}

void TypeExpression() :
{}
{
    //todo
}

void Operator() :
{}
{
//'align' 'by'
//  + - * / % ** : ! == != <= >= < > << >> & | ^ ~
    <ALIGN>
    | <BY>
    |<PLUS>
    | <MINUS>
    | <MUL>
    | <DIVIDE>
    | <MOD>
    | <POW>
    | <COLON>
    | <NOT>
    | <EQUAL>
    | <NOTEQUAL>
    | <LESSTHANOREQUALTO>
    | <GREATERTHANOREQUALTO>
    | <LESSTHAN>
    | <GREATERTHAN>
    | <SHIFTLEFT>
    | <SHIFTRIGHT>
    | <BITWISEAND>
    | <BITWISEOR>
    | <BITWISEXOR>
    | <TILDE>
//  = += -= *= /= %= **= &= |= ^= <<= >>= <=> <~> #
    | <ASSIGNEQUAL>
    | <PLUSEQUAL>
    | <MINUSEQUAL>
    | <MULEQUAL>
    | <DIVIDEEQUAL>
    | <MODEQUAL>
    | <POWEQUAL>
    | <BITWISEANDEQUAL>
    | <BITWISEOREQUAL>
    | <BITWISEXOREQUAL>
    | <SHIFTLEFTEQUAL>
    | <SHIFTRIGHTEQUAL>
    | <SWAP>
    | <IO>
    | <AND>
    | <RANGECOUNT>
    | <MINUSMINUS>
    | <PLUSPLUS>
}

void ArgumentList() :
{}
{
    "(" Formal() ("," Formal())* ")"
}

void TupleGroupedIdentifierList() :
{}
{
    "(" <ID> ("," <ID>)* ")"
}

void FormalType() :
{}
{
    ":" (TypeExpression() | "?" [TypeExpression()])
}

void VariableArgumentExpr() :
{}
{
    <ARGS> (Expression()  | "?" <ID>)?
}

void Formal() :
{}
{
      FormalIntent()
      (<ID> | TupleGroupedIdentifierList())
      [FormalType()]
      ("=" Expression()  | VariableArgumentExpr() )
}

void FormalIntent() :
{}
{
    <CONST> (<IN> | <REF>)?
    | <IN>
    | <OUT>
    | <INOUT>
    | <REF>
    | <PARAM>
    | <TYPE>
}

void ProcKind() :
{}
{
    <INLINE> | <EXPORT> | <EXTERN> | <OVERRIDE>
}

void ClassDeclaration() :
{}
{}

void Expression() :
{}
{

}